:-dynamic metta_file_buffer/5.
:-multifile metta_file_buffer/5.
metta_file_buffer(+,[:,'Any','Type'],[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(0,1,0,0)).
metta_file_buffer(+,[:,'Atom','Type'],[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(12,1,12,12)).
metta_file_buffer(+,[:,'Bool','Type'],[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(26,2,13,26)).
metta_file_buffer(+,[:,'Expression','Type'],[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(40,3,13,40)).
metta_file_buffer(+,[:,'Number','Type'],[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(60,4,19,60)).
metta_file_buffer(+,[:,'hyperon::space::DynSpace','Type'],[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(76,5,15,76)).
metta_file_buffer(+,[:,'ReturnType','Type'],[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(110,6,33,110)).
metta_file_buffer(+,[:,'Symbol','Type'],[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(130,7,19,130)).
metta_file_buffer(+,[:,'StateMonad','Type'],[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(146,8,15,146)).
metta_file_buffer(+,[:,'Type','Type'],[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(166,9,19,166)).
metta_file_buffer(+,[:,'%Undefined%','Type'],[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(180,10,13,180)).
metta_file_buffer(+,[:,'Variable','Type'],[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(201,11,20,201)).
metta_file_buffer(+,[:,'if-decons',[->,'Atom','Variable','Variable','Atom','Atom','Atom']],[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(219,12,17,219)).
metta_file_buffer(+,[:,'if-empty',[->,'Atom','Atom','Atom','Atom']],[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(276,13,56,276)).
metta_file_buffer(+,[:,'if-non-empty-expression',[->,'Atom','Atom','Atom','Atom']],[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(314,14,37,314)).
metta_file_buffer(+,[:,'if-not-reducible',[->,'Atom','Atom','Atom','Atom']],[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(367,15,52,367)).
metta_file_buffer(+,'$COMMENT'(";(: apply (-> Atom Variable Atom Atom))",17,0),[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(413,16,45,413)).
metta_file_buffer(+,'$COMMENT'(";(: cons (-> Atom Atom Atom))",18,0),[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(413,16,45,413)).
metta_file_buffer(+,'$COMMENT'(";(: decons (-> Atom Atom))",19,0),[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(413,16,45,413)).
metta_file_buffer(+,[:,return,[->,'Atom','ReturnType']],[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(413,16,45,413)).
metta_file_buffer(+,[:,switch,[->,'%Undefined%','Expression','Atom']],[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(543,21,31,543)).
metta_file_buffer(+,[:,unify,[->,'Atom','Atom','Atom','Atom','%Undefined%']],[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(587,22,43,587)).
metta_file_buffer(+,[:,'get-type0',[->,'Atom','Atom']],[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(634,23,46,634)).
metta_file_buffer(+,[:,'get-ftype',[->,'Atom','Atom']],[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(663,24,28,663)).
metta_file_buffer(+,[:,:,'%Undefined%'],[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(692,25,28,692)).
metta_file_buffer(+,[:,'function-arity',[->,'Symbol','Number']],[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(710,26,17,710)).
metta_file_buffer(+,[:,'predicate-arity',[->,'Symbol','Number']],[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(748,27,37,748)).
metta_file_buffer(+,[:,'pragma!',[->,'Atom','Atom',[->]]],[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(787,28,38,787)).
metta_file_buffer(+,[:,=,[->,'Atom','Atom','%Undefined%']],[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(819,29,31,819)).
metta_file_buffer(+,[:,match,[->,'hyperon::space::DynSpace','Atom','Atom','%Undefined%']],[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(852,30,32,852)).
metta_file_buffer(+,[:,case,[->,'Expression','Atom','Atom']],[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(914,31,61,914)).
metta_file_buffer(+,[:,combine,[->,_92394,_92394,_92394]],['_t'=_92394],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(949,32,34,949)).
metta_file_buffer(+,[:,'import!',[->,'hyperon::space::DynSpace','Atom',[->]]],[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(975,33,25,975)).
metta_file_buffer(+,[:,'get-type',[->,'Atom','Type']],[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(1027,34,51,1027)).
metta_file_buffer(+,[:,'PredicateArity',[->,'Symbol','Number']],[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(1055,35,27,1055)).
metta_file_buffer(+,[:,'If',[->,'Bool','Atom','Atom','Atom']],[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(1093,36,37,1093)).
metta_file_buffer(+,[:,'If',[->,'Bool','Atom','Atom']],[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(1125,37,31,1125)).
metta_file_buffer(+,[=,['If','True',_93254],_93254],['_then'=_93254],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(1152,38,26,1152)).
metta_file_buffer(+,[=,['If','False',_93310],[let,_93348,0,[let,_93348,1,_93348]]],['_n'=_93348,'_then'=_93310],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(1178,39,25,1178)).
metta_file_buffer(+,[=,['If',_93292,_93314,_93336],[if,_93292,_93314,_93336]],['_else'=_93336,'_then'=_93314,'_cond'=_93292],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(1224,40,45,1224)).
metta_file_buffer(+,['PredicateArity','PredicateArity',2],[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(1274,41,49,1274)).
metta_file_buffer(+,['PredicateArity',:,2],[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(1308,42,33,1308)).
metta_file_buffer(+,[=,[:,_93264,'P1'],['PredicateArity',_93264,1]],['_F'=_93264],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(1329,43,20,1329)).
metta_file_buffer(+,[:,:,'SrcPredicate'],[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(1365,44,35,1365)).
metta_file_buffer(+,[:,'If','SrcFunction'],[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(1384,45,18,1384)).
metta_file_buffer(+,'$COMMENT'("; Public MeTTa",48,0),[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(1403,46,18,1403)).
metta_file_buffer(+,['@doc',=,['@desc',"A symbol used to define reduction rules for expressions."],['@params',[['@param',"Pattern to be matched against expression to be reduced"],['@param',"Result of reduction or transformation of the first pattern"]]],['@return',"Not reduced itself unless custom equalities over equalities are added"]],[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(1403,46,18,1403)).
metta_file_buffer(+,[:,=,[->,_96596,_96596,'Atom']],['_t'=_96596],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(1742,54,85,1742)).
metta_file_buffer(+,'$COMMENT'(";; Implemented from Interpreters",56,0),[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(1764,55,21,1764)).
metta_file_buffer(+,[:,=,[->,'Atom','Atom','Atom']],[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(1764,55,21,1764)).
metta_file_buffer(+,'$COMMENT'("; Public MeTTa",60,0),[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(1824,58,25,1824)).
metta_file_buffer(+,['@doc','ErrorType',['@desc',"Type of the atom which contains error"]],[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(1824,58,25,1824)).
metta_file_buffer(+,[:,'ErrorType','Type'],[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(1905,61,64,1905)).
metta_file_buffer(+,'$COMMENT'(";; Implemented from Interpreters",63,0),[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(1924,62,18,1924)).
metta_file_buffer(+,'$COMMENT'("; Public MeTTa",65,0),[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(1924,62,18,1924)).
metta_file_buffer(+,['@doc','Error',['@desc',"Error constructor"],['@params',[['@param',"Atom which contains error"],['@param',"Error message, can be one of the reserved symbols: BadType, IncorrectNumberOfArguments"]]],['@return',"Instance of the error atom"]],[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(1924,62,18,1924)).
metta_file_buffer(+,[:,'Error',[->,'Atom','Atom','ErrorType']],[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(2215,71,41,2215)).
metta_file_buffer(+,'$COMMENT'(";; Implemented from Interpreters",73,0),[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(2250,72,34,2250)).
metta_file_buffer(+,'$COMMENT'("; Public MinimalMeTTa",75,0),[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(2250,72,34,2250)).
metta_file_buffer(+,['@doc',return,['@desc',"Returns value from the (function ...) expression"],['@params',[['@param',"Value to be returned"]]],['@return',"Passed argument"]],[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(2250,72,34,2250)).
metta_file_buffer(+,[:,return,[->,_102356,_102356]],['_t'=_102356],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(2462,80,30,2462)).
metta_file_buffer(+,'$COMMENT'(";; Implemented from Interpreters",82,0),[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(2484,81,21,2484)).
metta_file_buffer(+,'$COMMENT'("; Public MinimalMeTTa",84,0),[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(2484,81,21,2484)).
metta_file_buffer(+,['@doc',function,['@desc',"Evaluates the argument until it becomes (return <result>). Then (function (return <result>)) is reduced to the <result>."],['@params',[['@param',"Atom to be evaluated"]]],['@return',"Result of atom's evaluation"]],[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(2484,81,21,2484)).
metta_file_buffer(+,[:,function,[->,'Atom','Atom']],[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(2782,89,42,2782)).
metta_file_buffer(+,'$COMMENT'(";; Implemented from Interpreters",91,0),[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(2810,90,27,2810)).
metta_file_buffer(+,'$COMMENT'("; Public MinimalMeTTa",93,0),[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(2810,90,27,2810)).
metta_file_buffer(+,['@doc',eval,['@desc',"Evaluates input atom, makes one step of the evaluation"],['@params',[['@param',"Atom to be evaluated, can be reduced via equality expression (= ...) or by calling a grounded function"]]],['@return',"Result of evaluation"]],[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(2810,90,27,2810)).
metta_file_buffer(+,[:,eval,[->,'Atom','Atom']],[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(3113,98,35,3113)).
metta_file_buffer(+,'$COMMENT'(";; Implemented from Interpreters",100,0),[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(3137,99,23,3137)).
metta_file_buffer(+,'$COMMENT'("; Public MinimalMeTTa",102,0),[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(3137,99,23,3137)).
metta_file_buffer(+,['@doc',chain,['@desc',"Evaluates first argument, binds it to the variable (second argument) and then evaluates third argument which contains (or not) mentioned variable"],['@params',[['@param',"Atom to be evaluated"],['@param',"Variable"],['@param',"Atom which will be evaluated at the end"]]],['@return',"Result of evaluating third input argument"]],[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(3137,99,23,3137)).
metta_file_buffer(+,[:,chain,[->,'Atom','Variable','Atom','Atom']],[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(3550,109,56,3550)).
metta_file_buffer(+,'$COMMENT'(";; Implemented from Interpreters",111,0),[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(3589,110,38,3589)).
metta_file_buffer(+,'$COMMENT'(";; Helper MinimalMeTTa",113,0),[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(3589,110,38,3589)).
metta_file_buffer(+,['@doc','if-unify',['@desc',"Matches two first arguments and returns third argument if they are matched and forth argument otherwise"],['@params',[['@param',"First atom to unify with"],['@param',"Second atom to unify with"],['@param',"Result if two atoms unified successfully"],['@param',"Result otherwise"]]],['@return',"Third argument when first two atoms are unifiable or forth one otherwise"]],[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(3589,110,38,3589)).
metta_file_buffer(+,[:,'if-unify',[->,'Atom','Atom','Atom','Atom','%Undefined%']],[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(4037,121,87,4037)).
metta_file_buffer(+,'$COMMENT'(";; Implemented from Interpreters",123,0),[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(4087,122,49,4087)).
metta_file_buffer(+,['ALT=',['if-unify',_117998,_117998,_118038,_118060],_118038],['_else'=_118060,'_then'=_118038,'_a'=_117998],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(4087,122,49,4087)).
metta_file_buffer(+,['ALT=',['if-unify',_118322,_118344,_118366,_118388],[case,['if-unify-or-empty',_118322,_118344],[['Empty',_118388]]]],['_else'=_118388,'_then'=_118366,'_b'=_118344,'_a'=_118322],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(4163,125,41,4163)).
metta_file_buffer(+,'$COMMENT'(";; Helper MinimalMeTTa",129,0),[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(4251,127,52,4251)).
metta_file_buffer(+,[:,'if-unify-or-empty',[->,'Atom','Atom','Atom']],[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(4251,127,52,4251)).
metta_file_buffer(+,[=,['if-unify-or-empty',_118258,_118258],unified],['_a'=_118258],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(4317,130,41,4317)).
metta_file_buffer(+,[=,['if-unify-or-empty',_118264,_118286],[empty]],['_b'=_118286,'_a'=_118264],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(4355,131,37,4355)).
metta_file_buffer(+,'$COMMENT'(";; Public MeTTa",135,0),[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(4393,132,37,4393)).
metta_file_buffer(+,['@doc','cons-atom',['@desc',"Constructs an expression using two arguments"],['@params',[['@param',"Head of an expression"],['@param',"Tail of an expression"]]],['@return',"New expression consists of two input arguments"]],[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(4393,132,37,4393)).
metta_file_buffer(+,[:,'cons-atom',[->,'Atom','Expression','Expression']],[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(4635,141,61,4635)).
metta_file_buffer(+,'$COMMENT'(";; Implemented from Interpreters",143,0),[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(4681,142,45,4681)).
metta_file_buffer(+,'$COMMENT'("; AKA? (: cons (-> Atom Atom Atom))",144,0),[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(4681,142,45,4681)).
metta_file_buffer(+,'$COMMENT'(";; Public MeTTa",146,0),[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(4681,142,45,4681)).
metta_file_buffer(+,['@doc','decons-atom',['@desc',"Works as a reverse to cons-atom function. It gets Expression as an input and returns it splitted to head and tail, e.g. (decons-atom (Cons X Nil)) -> (Cons (X Nil))"],['@params',[['@param',"Expression"]]],['@return',"Deconsed expression"]],[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(4681,142,45,4681)).
metta_file_buffer(+,[:,'decons-atom',[->,'Expression','Expression']],[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(5038,151,34,5038)).
metta_file_buffer(+,'$COMMENT'(";; Implemented from Interpreters",153,0),[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(5081,152,42,5081)).
metta_file_buffer(+,'$COMMENT'("; AKA? (: decons (-> Atom Atom))",154,0),[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(5081,152,42,5081)).
metta_file_buffer(+,'$COMMENT'(";; Public MeTTa",156,0),[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(5081,152,42,5081)).
metta_file_buffer(+,['@doc','collapse-bind',['@desc',"Evaluates the Atom (first argument) and returns an expression which contains all alternative evaluations in a form (Atom Bindings). Bindings are represented in a form of a grounded atom."],['@params',[['@param',"Atom to be evaluated"]]],['@return',"All alternative evaluations"]],[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(5081,152,42,5081)).
metta_file_buffer(+,'$COMMENT'(";; collapse-bind because `collapse` doesnt guarentee shared bindings",162,0),[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(5477,161,42,5477)).
metta_file_buffer(+,[:,'collapse-bind',[->,'Atom','Atom']],[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(5477,161,42,5477)).
metta_file_buffer(+,'$COMMENT'("; We specialize but leaving the old defs in case",163,33),[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(5579,163,32,5579)).
metta_file_buffer(+,[:,'collapse-bind',[->,'Atom','Expression']],[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(5579,163,32,5579)).
metta_file_buffer(+,'$COMMENT'(";; Implemented from Interpreters",165,0),[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(5667,164,38,5667)).
metta_file_buffer(+,'$COMMENT'(";; Public MeTTa",167,0),[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(5667,164,38,5667)).
metta_file_buffer(+,['@doc','superpose-bind',['@desc',"Complement to the collapse-bind. It takes result of collapse-bind (first argument) and returns only result atoms without bindings"],['@params',[['@param',"Expression in form (Atom Binding)"]]],['@return',"Non-deterministic list of Atoms"]],[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(5667,164,38,5667)).
metta_file_buffer(+,'$COMMENT'(";; superpose-bind because `superpose` doesnt guarentee shared bindings",173,0),[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(5991,172,46,5991)).
metta_file_buffer(+,[:,'superpose-bind',[->,'Expression','Atom']],[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(5991,172,46,5991)).
metta_file_buffer(+,[:,'superpose-bind',[->,'Atom','Atom']],[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(6102,174,39,6102)).
metta_file_buffer(+,'$COMMENT'("; We specialize them but leaving the old defs in case",175,34),[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(6136,175,33,6136)).
metta_file_buffer(+,'$COMMENT'(";; Implemented from Interpreters",176,0),[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(6136,175,33,6136)).
metta_file_buffer(+,'$COMMENT'("; Helper Minimal Metta?",178,0),[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(6136,175,33,6136)).
metta_file_buffer(+,['@doc',metta,['@desc',"Run MeTTa interpreter on atom."],['@params',[['@param',"Atom to be interpreted"],['@param',"Type of input atom"],['@param',"Atomspace where intepretation should take place"]]],['@return',"Result of interpretation"]],[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(6136,175,33,6136)).
metta_file_buffer(+,[:,metta,[->,'Atom','Type','Grounded','Atom']],[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(6493,185,39,6493)).
metta_file_buffer(+,'$COMMENT'(";; Implemented from Interpreters",187,0),[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(6532,186,38,6532)).
metta_file_buffer(+,'$COMMENT'(";; Public MinimalMeTTa?",189,0),[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(6532,186,38,6532)).
metta_file_buffer(+,['@doc',id,['@desc',"Returns its argument"],['@params',[['@param',"Input argument"]]],['@return',"Input argument"]],[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(6532,186,38,6532)).
metta_file_buffer(+,[:,id,[->,'Atom','Atom']],[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(6707,194,29,6707)).
metta_file_buffer(+,[=,[id,_135942],_135942],['_x'=_135942],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(6729,195,21,6729)).
metta_file_buffer(+,'$COMMENT'(";; Public MeTTa?",198,0),[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(6744,196,14,6744)).
metta_file_buffer(+,['@doc','atom-subst',['@desc',"Substitutes variable passed as a second argument in the third argument by the first argument"],['@params',[['@param',"Value to use for replacement"],['@param',"Variable to replace"],['@param',"Template to replace variable by the value"]]],['@return',"Template with substituted variable"]],[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(6744,196,14,6744)).
metta_file_buffer(+,[:,'atom-subst',[->,'Atom','Variable','Atom','Atom']],[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(7085,205,49,7085)).
metta_file_buffer(+,'$COMMENT'(";; Maybe Implement from Interpreter? But our transpiler should brilliantt enbought to make this awesome prolog code instead",207,0),[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(7129,206,43,7129)).
metta_file_buffer(+,[=,['atom-subst',_139774,_139796,_139818],[function,[chain,[eval,[id,_139774]],_139796,[return,_139818]]]],['_templ'=_139818,'_var'=_139796,'_atom'=_139774],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(7129,206,43,7129)).
metta_file_buffer(+,'$COMMENT'(";; Helper MinimalMeTTa",211,0),[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(7349,209,61,7349)).
metta_file_buffer(+,['@doc','if-decons-expr',['@desc',"Checks if first argument is non empty expression. If so gets tail and head from the first argument and returns forth argument using head and tail values. Returns fifth argument otherwise."],['@params',[['@param',"Expression to be deconstructed"],['@param',"Head variable"],['@param',"Tail variable"],['@param',"Template to return if first argument is a non-empty expression"],['@param',"Default value to return otherwise"]]],['@return',"Either template with head and tail replaced by values or default value"]],[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(7349,209,61,7349)).
metta_file_buffer(+,[:,'if-decons-expr',[->,'Expression','Variable','Variable','Atom','Atom','Atom']],[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(7926,220,85,7926)).
metta_file_buffer(+,'$COMMENT'(";; Maybe Implement from Interpreter? But our transpiler should brilliantt enbought to make this awesome prolog code instead",222,0),[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(7994,221,67,7994)).
metta_file_buffer(+,[=,['if-decons-expr',_145806,_145828,_145850,_145872,_145894],[function,[eval,['if-equal',_145806,[],[return,_145894],[chain,['decons-atom',_145806],_146074,['if-unify',_146074,[_145828,_145850],[return,_145872],[return,_145894]]]]]]],['_list'=_146074,'_else'=_145894,'_then'=_145872,'_tail'=_145850,'_head'=_145828,'_atom'=_145806],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(7994,221,67,7994)).
metta_file_buffer(+,'$COMMENT'(";; Helper MinimalMeTTa",229,0),[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(8334,227,72,8334)).
metta_file_buffer(+,['@doc','if-error',['@desc',"Checks if first argument is an error atom. Returns second argument if so or third argument otherwise."],['@params',[['@param',"Atom to be checked for the error"],['@param',"Value to return if first argument is an error"],['@param',"Value to return otherwise"]]],['@return',"Second or third argument"]],[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(8334,227,72,8334)).
metta_file_buffer(+,[:,'if-error',[->,'Atom','Atom','Atom','Atom']],[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(8692,236,39,8692)).
metta_file_buffer(+,'$COMMENT'(";; Maybe Implement from Interpreter? But our transpiler should brilliantt enbought to make this awesome prolog code instead",238,0),[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(8730,237,37,8730)).
metta_file_buffer(+,[=,['if-error',_149914,_149936,_149958],[function,[chain,[eval,['get-metatype',_149914]],_150062,[eval,['if-equal',_150062,'Expression',[eval,['if-equal',_149914,[],[return,_149958],[chain,['decons-atom',_149914],_150284,['if-unify',_150284,[_150348,_150370],[eval,['if-equal',_150348,'Error',[return,_149936],[return,_149958]]],[return,_149958]]]]],[return,_149958]]]]]],['_tail'=_150370,'_head'=_150348,'_list'=_150284,'_meta'=_150062,'_else'=_149958,'_then'=_149936,'_atom'=_149914],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(8730,237,37,8730)).
metta_file_buffer(+,'$COMMENT'(";; Helper MinimalMeTTa",250,0),[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(9242,248,26,9242)).
metta_file_buffer(+,['@doc','return-on-error',['@desc',"Returns first argument if it is Empty or an error. Returns second argument otherwise."],['@params',[['@param',"Previous evaluation result"],['@param',"Atom for further evaluation"]]],['@return',"Return previous result if it is an error or Empty or continue evaluation"]],[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(9242,248,26,9242)).
metta_file_buffer(+,[:,'return-on-error',[->,'Atom','Atom','Atom']],[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(9574,256,87,9574)).
metta_file_buffer(+,[=,['return-on-error',_152786,_152808],[function,[eval,['if-equal',_152786,'Empty',[return,[return,'Empty']],[eval,['if-error',_152786,[return,[return,_152786]],[return,_152808]]]]]]],['_then'=_152808,'_atom'=_152786],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(9614,257,39,9614)).
metta_file_buffer(+,'$COMMENT'("; Difference between `switch` and `case` is a way how they interpret `Empty`",264,0),[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(9789,261,27,9789)).
metta_file_buffer(+,'$COMMENT'("; result. `CaseOp` interprets first argument inside itself and then manually",265,0),[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(9789,261,27,9789)).
metta_file_buffer(+,'$COMMENT'("; checks whether result is empty. `switch` is interpreted in a context of",266,0),[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(9789,261,27,9789)).
metta_file_buffer(+,'$COMMENT'("; main interpreter. Minimal interpreter correctly passes `Empty` as an",267,0),[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(9789,261,27,9789)).
metta_file_buffer(+,'$COMMENT'("; argument to the `switch` but when `switch` is called from MeTTa interpreter",268,0),[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(9789,261,27,9789)).
metta_file_buffer(+,'$COMMENT'("; (for example user evaluates `!(switch (if-unify A B ok Empty) ...)` then",269,0),[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(9789,261,27,9789)).
metta_file_buffer(+,'$COMMENT'("; emptiness of the first argument is checked by interpreter and it will",270,0),[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(9789,261,27,9789)).
metta_file_buffer(+,'$COMMENT'("; break execution when `Empty` is returned.",271,0),[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(9789,261,27,9789)).
metta_file_buffer(+,'$COMMENT'(";; Helper MinimalMeTTa",273,0),[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(9789,261,27,9789)).
metta_file_buffer(+,['@doc',switch,['@desc',"Subsequently tests multiple pattern-matching conditions (second argument) for the given value (first argument)"],['@params',[['@param',"Atom to be matched with patterns"],['@param',"Tuple of pairs mapping condition patterns to results"]]],['@return',"Result which corresponds to the pattern which is matched with the passed atom first"]],[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(9789,261,27,9789)).
metta_file_buffer(+,'$COMMENT'(";; Dumb MeTTaLog? will we implement it?",281,0),[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(10749,279,98,10749)).
metta_file_buffer(+,[:,switch,[->,'Atom','Atom','Atom']],[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(10749,279,98,10749)).
metta_file_buffer(+,[=,[switch,_156944,_156966],[case,[eval,_156944],_156966]],['_list'=_156966,'_atom'=_156944],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(10821,282,30,10821)).
metta_file_buffer(+,'$COMMENT'("; BEGIN - Yes, Douglas turned this sourcecode form into a a Value with the type Comment",288,0),[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(10872,283,50,10872)).
metta_file_buffer(+,'$COMMENT'("; Helper MinimalMeTTa",296,0),[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(10872,283,50,10872)).
metta_file_buffer(+,[:,[[:,switch,[->,'%Undefined%','Expression','Atom']],[=,[switch,_165774,_165796],[function,[chain,['decons-atom',_165796],_165884,[chain,[eval,['switch-internal',_165774,_165884]],_165990,[chain,[eval,['if-equal',_165990,'NotReducible','Empty',_165990]],_166112,[return,_166112]]]]]],['@doc','switch-internal',['@desc',"This function is being called inside switch function to test one of the cases and it calls switch once again if current condition is not met"],['@params',[['@param',"Atom (it will be evaluated)"],['@param',"Deconsed tuple of pairs mapping condition patterns to results"]]],['@return',"Result of evaluating of Atom bound to met condition"]],[=,['switch-internal',_165774,[[_166378,_166400],_166422]],[function,['if-unify',_165774,_166378,[return,_166400],[chain,[eval,[switch,_165774,_166422]],_166630,[return,_166630]]]]]],'Comment'],['_ret'=_166630,'_tail'=_166422,'_template'=_166400,'_pattern'=_166378,'_x'=_166112,'_res'=_165990,'_list'=_165884,'_cases'=_165796,'_atom'=_165774],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(10872,283,50,10872)).
metta_file_buffer(+,'$COMMENT'("; ENDOF - Yes, Douglas turned this sourcecode form into a a Value with the type Comment",309,0),[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(11809,308,10,11809)).
metta_file_buffer(+,'$COMMENT'("; Helper MinimalMeTTa",313,0),[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(11809,308,10,11809)).
metta_file_buffer(+,'$COMMENT'("; TODO: Type is used here, but there is no definition for the -> type",314,0),[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(11809,308,10,11809)).
metta_file_buffer(+,'$COMMENT'("; constructor for instance, thus in practice it matches because -> has",315,0),[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(11809,308,10,11809)).
metta_file_buffer(+,'$COMMENT'("; %Undefined% type. We need to assign proper type to -> and other type",316,0),[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(11809,308,10,11809)).
metta_file_buffer(+,'$COMMENT'("; constructors but it is not possible until we support vararg types.",317,0),[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(11809,308,10,11809)).
metta_file_buffer(+,['@doc','is-function',['@desc',"Function checks if input type is a function type"],['@params',[['@param',"Type atom"]]],['@return',"True if type is a function type, False - otherwise"]],[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(11809,308,10,11809)).
metta_file_buffer(+,[:,'is-function',[->,'Type','Bool']],[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(12390,322,65,12390)).
metta_file_buffer(+,'$COMMENT'(";; This impl is old and maybe not sufficiant?",324,0),[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(12421,323,30,12421)).
metta_file_buffer(+,[=,['is-function',_167750],[function,[chain,[eval,['get-metatype',_167750]],_167854,[eval,[switch,[_167750,_167854],[[[_167750,'Expression'],[eval,['if-decons-expr',_167750,_168052,_168074,['if-unify',_168052,->,[return,'True'],[return,'False']],[return,['Error',['is-function',_167750],"is-function non-empty expression as an argument"]]]]],[[_167750,_167854],[return,'False']]]]]]]],['__tail'=_168074,'_head'=_168052,'_meta'=_167854,'_type'=_167750],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(12421,323,30,12421)).
metta_file_buffer(+,'$COMMENT'(";; Public MeTTa",335,0),[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(12860,333,10,12860)).
metta_file_buffer(+,['@doc','type-cast',['@desc',"Casts atom passed as a first argument to the type passed as a second argument using space as a context"],['@params',[['@param',"Atom to be casted"],['@param',"Type to cast atom to"],['@param',"Context atomspace"]]],['@return',"Atom if casting is successful, (Error ... BadType) otherwise"]],[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(12860,333,10,12860)).
metta_file_buffer(+,[:,'type-cast',[->,'Atom','Atom','Atom','Atom']],[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(13201,342,75,13201)).
metta_file_buffer(+,'$COMMENT'(";; This impl is old and maybe not sufficiant?",344,0),[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(13240,343,38,13240)).
metta_file_buffer(+,['ALT=',['type-cast',_171724,_171746,_171768],[function,[chain,[eval,['get-metatype',_171724]],_171872,[eval,['if-equal',_171746,_171872,[return,_171724],[chain,[eval,['collapse-bind',[eval,['get-type',_171724,_171768]]]],_172112,[chain,[eval,['map-atom',_172112,_172200,[eval,['first-from-pair',_172200]]]],_172272,[chain,[eval,['foldl-atom',_172272,'False',_172368,_172390,[eval,['match-type-or',_172368,_172390,_171746]]]],_172498,[eval,[if,_172498,[return,_171724],[return,['Error',_171724,'BadType']]]]]]]]]]]],['_is-some-comp'=_172498,'_b'=_172390,'_a'=_172368,'_actual-types'=_172272,'_pair'=_172200,'_collapsed'=_172112,'_meta'=_171872,'_space'=_171768,'_type'=_171746,'_atom'=_171724],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(13240,343,38,13240)).
metta_file_buffer(+,'$COMMENT'(";; Public MeTTa",356,0),[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(13843,354,57,13843)).
metta_file_buffer(+,['@doc','match-types',['@desc',"Checks if two types can be unified and returns third argument if so, fourth - otherwise"],['@params',[['@param',"First type"],['@param',"Second type"],['@param',"Atom to be returned if types can be unified"],['@param',"Atom to be returned if types cannot be unified"]]],['@return',"Third or fourth argument"]],[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(13843,354,57,13843)).
metta_file_buffer(+,[:,'match-types',[->,'Atom','Atom','Atom','Atom','Atom']],[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(14207,364,39,14207)).
metta_file_buffer(+,[=,['match-types',_177946,_177968,_177990,_178012],[function,[eval,['if-equal',_177946,'%Undefined%',[return,_177990],[eval,['if-equal',_177968,'%Undefined%',[return,_177990],[eval,['if-equal',_177946,'Atom',[return,_177990],[eval,['if-equal',_177968,'Atom',[return,_177990],['if-unify',_177946,_177968,[return,_177990],[return,_178012]]]]]]]]]]]],['_else'=_178012,'_then'=_177990,'_type2'=_177968,'_type1'=_177946],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(14253,365,45,14253)).
metta_file_buffer(+,'$COMMENT'("; Helper MinimalMeTTa?",377,0),[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(14616,375,75,14616)).
metta_file_buffer(+,['@doc','first-from-pair',['@desc',"Gets a pair as a first argument and returns first atom from pair"],['@params',[['@param',"Pair"]]],['@return',"First atom from a pair"]],[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(14616,375,75,14616)).
metta_file_buffer(+,[=,['first-from-pair',_179878],[function,['if-unify',_179878,[_179958,_179980],[return,_179958],[return,['Error',['first-from-pair',_179878],"incorrect pair format"]]]]],['_second'=_179980,'_first'=_179958,'_pair'=_179878],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(14812,382,37,14812)).
metta_file_buffer(+,'$COMMENT'("; Helper MinimalMeTTa?",389,0),[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(14984,387,73,14984)).
metta_file_buffer(+,['@doc','match-type-or',['@desc',"Checks if two types (second and third arguments) can be unified and returns result of OR operation between first argument and type checking result"],['@params',[['@param',"Boolean value"],['@param',"First type"],['@param',"Second type"]]],['@return',"True or False"]],[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(14984,387,73,14984)).
metta_file_buffer(+,[=,['match-type-or',_183694,_183716,_183738],[function,[chain,[eval,['match-types',_183716,_183738,'True','False']],_183876,[chain,[eval,[or,_183694,_183876]],_183982,[return,_183982]]]]],['_or'=_183982,'_matched'=_183876,'_type'=_183738,'_next'=_183716,'_folded'=_183694],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(15313,396,28,15313)).
metta_file_buffer(+,'$COMMENT'(";; Public MeTTa",402,0),[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(15492,400,63,15492)).
metta_file_buffer(+,['@doc','filter-atom',['@desc',"Function takes list of atoms (first argument), variable (second argument) and filter predicate (third argument) and returns list with items which passed filter. E.g. (filter-atom (1 2 3 4) $v (eval (> $v 2))) will give (3 4)"],['@params',[['@param',"List of atoms"],['@param',"Variable"],['@param',"Filter predicate"]]],['@return',"Filtered list"]],[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(15492,400,63,15492)).
metta_file_buffer(+,[:,'filter-atom',[->,'Expression','Variable','Atom','Expression']],[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(15893,409,28,15893)).
metta_file_buffer(+,[=,['filter-atom',_188490,_188512,_188534],[function,[eval,['if-decons-expr',_188490,_188622,_188644,[chain,[eval,['filter-atom',_188644,_188512,_188534]],_188768,[chain,[eval,['atom-subst',_188622,_188512,_188534]],_188892,[chain,_188892,_188948,[eval,[if,_188948,[chain,['cons-atom',_188622,_188768],_189088,[return,_189088]],[return,_188768]]]]]],[return,[]]]]]],['_res'=_189088,'_is-filtered'=_188948,'_filter-expr'=_188892,'_tail-filtered'=_188768,'_tail'=_188644,'_head'=_188622,'_filter'=_188534,'_var'=_188512,'_list'=_188490],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(15950,410,56,15950)).
metta_file_buffer(+,'$COMMENT'(";; Public MeTTa",421,0),[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(16378,419,20,16378)).
metta_file_buffer(+,['@doc','map-atom',['@desc',"Function takes list of atoms (first argument), variable to be used inside (second variable) and an expression which will be evaluated for each atom in list (third argument). Expression should contain variable. So e.g. (map-atom (1 2 3 4) $v (eval (+ $v 1))) will give (2 3 4 5)"],['@params',[['@param',"List of atoms"],['@param',"Variable name"],['@param',"Template using variable"]]],['@return',"Result of evaluating template for each atom in a list"]],[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(16378,419,20,16378)).
metta_file_buffer(+,[:,'map-atom',[->,'Expression','Variable','Atom','Expression']],[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(16881,428,68,16881)).
metta_file_buffer(+,[=,['map-atom',_193642,_193664,_193686],[function,[eval,['if-decons-expr',_193642,_193774,_193796,[chain,[eval,['map-atom',_193796,_193664,_193686]],_193920,[chain,[eval,['atom-subst',_193774,_193664,_193686]],_194044,[chain,_194044,_194100,[chain,['cons-atom',_194100,_193920],_194190,[return,_194190]]]]],[return,[]]]]]],['_res'=_194190,'_head-mapped'=_194100,'_map-expr'=_194044,'_tail-mapped'=_193920,'_tail'=_193796,'_head'=_193774,'_map'=_193686,'_var'=_193664,'_list'=_193642],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(16935,429,53,16935)).
metta_file_buffer(+,'$COMMENT'(";; Public MeTTa",438,0),[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(17272,436,20,17272)).
metta_file_buffer(+,['@doc','foldl-atom',['@desc',"Function takes list of values (first argument), initial value (second argument) and operation (fifth argument) and applies it consequently to the list of values, using init value as a start. It also takes two variables (third and fourth argument) to use them inside"],['@params',[['@param',"List of values"],['@param',"Init value"],['@param',"Variable"],['@param',"Variable"],['@param',"Operation"]]],['@return',"Result of applying operation to the list of values"]],[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(17272,436,20,17272)).
metta_file_buffer(+,[:,'foldl-atom',[->,'Expression','Atom','Variable','Variable','Atom','Atom']],[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(17794,447,65,17794)).
metta_file_buffer(+,[=,['foldl-atom',_199318,_199340,_199362,_199384,_199406],[function,[eval,['if-decons-expr',_199318,_199494,_199516,[chain,[eval,['atom-subst',_199340,_199362,_199406]],_199640,[chain,[eval,['atom-subst',_199494,_199384,_199640]],_199764,[chain,_199764,_199820,[chain,[eval,['foldl-atom',_199516,_199820,_199362,_199384,_199406]],_199980,[return,_199980]]]]],[return,_199340]]]]],['_res'=_199980,'_head-folded'=_199820,'_op-head'=_199764,'_op-init'=_199640,'_tail'=_199516,'_head'=_199494,'_op'=_199406,'_b'=_199384,'_a'=_199362,'_init'=_199340,'_list'=_199318],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(17858,448,63,17858)).
metta_file_buffer(+,'$COMMENT'(";; Helper MinimalMeTTa",457,0),[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(18212,455,23,18212)).
metta_file_buffer(+,[:,'separate-errors',[->,'Expression','Expression','Expression']],[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(18212,455,23,18212)).
metta_file_buffer(+,[=,['separate-errors',_199268,_199290],[function,['if-unify',_199268,[_199370,_199392],['if-unify',_199290,[_199456,_199478],[eval,['if-error',_199456,[chain,['cons-atom',_199290,_199392],_199618,[return,[_199370,_199618]]],[chain,['cons-atom',_199290,_199370],_199768,[return,[_199768,_199392]]]]],[return,_199268]],[return,_199268]]]],['_suc\''=_199768,'_err\''=_199618,'__b'=_199478,'_a'=_199456,'_err'=_199392,'_suc'=_199370,'_res'=_199290,'_succ-err'=_199268],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(18294,458,57,18294)).
metta_file_buffer(+,'$COMMENT'(";; Helper MinimalMeTTa",468,0),[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(18615,466,26,18615)).
metta_file_buffer(+,'$COMMENT'(";(chain (eval (print-alternatives! $atom $collapsed)) $_",472,6),[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(18615,466,26,18615)).
metta_file_buffer(+,[=,['check-alternatives',_199348],[function,[chain,['collapse-bind',_199348],_199436,[chain,[eval,['foldl-atom',_199436,[[],[]],_199548,_199570,[eval,['separate-errors',_199548,_199570]]]],_199660,['if-unify',_199660,[_199724,_199746],[chain,[eval,['if-equal',_199724,[],_199746,_199724]],_199878,[chain,['superpose-bind',_199878],_199950,[return,_199950]]],[return,['Error',['check-alternatives',_199348],"list of results was not filtered correctly"]]]]]]],['_ret'=_199950,'_filtered'=_199878,'_error'=_199746,'_success'=_199724,'_separated'=_199660,'_res'=_199570,'_succ-err'=_199548,'_collapsed'=_199436,'_atom'=_199348],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(18615,466,26,18615)).
metta_file_buffer(+,'$COMMENT'(";; Public MeTTa",480,0),[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(19207,478,104,19207)).
metta_file_buffer(+,[=,[interpret,_199614,_199636,_199658],[function,[chain,[eval,['get-metatype',_199614]],_199762,[eval,['if-equal',_199636,'Atom',[return,_199614],[eval,['if-equal',_199636,_199762,[return,_199614],[eval,[switch,[_199636,_199762],[[[_199636,'Variable'],[return,_199614]],[[_199636,'Symbol'],[chain,[eval,['type-cast',_199614,_199636,_199658]],_200282,[return,_200282]]],[[_199636,'Grounded'],[chain,[eval,['type-cast',_199614,_199636,_199658]],_200282,[return,_200282]]],[[_199636,'Expression'],[chain,[eval,['check-alternatives',[eval,['interpret-expression',_199614,_199636,_199658]]]],_200282,[return,_200282]]]]]]]]]]]]],['_ret'=_200282,'_meta'=_199762,'_space'=_199658,'_type'=_199636,'_atom'=_199614],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(19207,478,104,19207)).
metta_file_buffer(+,'$COMMENT'(";; Helper MinimalMeTTa",497,0),[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(19878,495,18,19878)).
metta_file_buffer(+,[=,['interpret-expression',_199572,_199594,_199616],[function,[eval,['if-decons-expr',_199572,_199704,_199726,[chain,[eval,['get-type',_199704,_199616]],_199832,[chain,[eval,['is-function',_199832]],_199920,['if-unify',_199920,'True',[chain,[eval,['interpret-func',_199572,_199832,_199594,_199616]],_200104,[chain,[eval,['metta-call',_200104,_199594,_199616]],_200228,[return,_200228]]],[chain,[eval,['interpret-tuple',_199572,_199616]],_200104,[chain,[eval,['metta-call',_200104,_199594,_199616]],_200228,[return,_200228]]]]]],[chain,[eval,['type-cast',_199572,_199594,_199616]],_200228,[return,_200228]]]]]],['_ret'=_200228,'_reduced-atom'=_200104,'_is-func'=_199920,'_op-type'=_199832,'_args'=_199726,'_op'=_199704,'_space'=_199616,'_type'=_199594,'_atom'=_199572],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(19878,495,18,19878)).
metta_file_buffer(+,'$COMMENT'(";; Helper MinimalMeTTa",509,0),[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(20535,507,73,20535)).
metta_file_buffer(+,[=,['interpret-func',_199460,_199482,_199504,_199526],[function,[eval,['if-decons-expr',_199460,_199614,_199636,[chain,[eval,[interpret,_199614,_199482,_199526]],_199760,[eval,['return-on-error',_199760,[eval,['if-decons-expr',_199482,_199882,_199904,[chain,[eval,['interpret-args',_199460,_199636,_199904,_199504,_199526]],_200064,[eval,['return-on-error',_200064,[chain,['cons-atom',_199760,_200064],_200204,[return,_200204]]]]],[return,['Error',_199482,"Function type expected"]]]]]]],[return,['Error',_199460,"Non-empty expression atom is expected"]]]]]],['_r'=_200204,'_reduced-args'=_200064,'_arg-types'=_199904,'_arrow'=_199882,'_reduced-op'=_199760,'_args'=_199636,'_op'=_199614,'_space'=_199526,'_ret-type'=_199504,'_type'=_199482,'_expr'=_199460],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(20535,507,73,20535)).
metta_file_buffer(+,'$COMMENT'(";; Helper MinimalMeTTa",521,0),[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(21170,519,71,21170)).
metta_file_buffer(+,'$COMMENT'("; check that head was changed otherwise Error or Empty in the head",535,10),[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(21170,519,71,21170)).
metta_file_buffer(+,'$COMMENT'("; can be just an argument which is passed by intention",536,10),[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(21170,519,71,21170)).
metta_file_buffer(+,[=,['interpret-args',_199966,_199988,_200010,_200032,_200054],[function,['if-unify',_199988,[],[eval,['if-decons-expr',_200010,_200184,_200206,[chain,[eval,[==,[],_200206]],_200302,[eval,[if,_200302,[eval,['match-types',_200184,_200032,[return,[]],[return,['Error',_199966,'BadType']]]],[return,['Error',_199966,'BadType']]]]],[return,['Error',_199966,"Too many arguments"]]]],[eval,['if-decons-expr',_199988,_200690,_200712,[eval,['if-decons-expr',_200010,_200784,_200806,[chain,[eval,[interpret,_200690,_200784,_200054]],_200930,[eval,['if-equal',_200930,_200690,[chain,[eval,['interpret-args-tail',_199966,_200930,_200712,_200806,_200032,_200054]],_201176,[return,_201176]],[eval,['return-on-error',_200930,[chain,[eval,['interpret-args-tail',_199966,_200930,_200712,_200806,_200032,_200054]],_201176,[return,_201176]]]]]]],[return,['Error',_199966,'BadType']]]],[return,['Error',['interpret-atom',_199966,_199988,_200010,_200054],"Non-empty expression atom is expected"]]]]]]],['_ret'=_201176,'_reduced-head'=_200930,'_tail-types'=_200806,'_head-type'=_200784,'_tail'=_200712,'_head'=_200690,'_correct-type-len'=_200302,'_type-tail'=_200206,'_actual-ret-type'=_200184,'_space'=_200054,'_ret-type'=_200032,'_arg-types'=_200010,'_args'=_199988,'_atom'=_199966],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(21170,519,71,21170)).
metta_file_buffer(+,'$COMMENT'(";; Helper MinimalMeTTa",544,0),[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(22482,542,115,22482)).
metta_file_buffer(+,[=,['interpret-args-tail',_199158,_199180,_199202,_199224,_199246,_199268],[function,[chain,[eval,['interpret-args',_199158,_199202,_199224,_199246,_199268]],_199444,[eval,['return-on-error',_199444,[chain,['cons-atom',_199180,_199444],_199584,[return,_199584]]]]]]],['_ret'=_199584,'_reduced-tail'=_199444,'_space'=_199268,'_ret-type'=_199246,'_args-tail-types'=_199224,'_args-tail'=_199202,'_head'=_199180,'_atom'=_199158],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(22482,542,115,22482)).
metta_file_buffer(+,'$COMMENT'(";; Helper MinimalMeTTa",550,0),[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(22808,548,70,22808)).
metta_file_buffer(+,[=,['interpret-tuple',_201992,_202014],[function,['if-unify',_201992,[],[return,_201992],[eval,['if-decons-expr',_201992,_202178,_202200,[chain,[eval,[interpret,_202178,'%Undefined%',_202014]],_202314,[eval,['if-equal',_202314,'Empty',[return,'Empty'],[chain,[eval,['interpret-tuple',_202200,_202014]],_202502,[eval,['if-equal',_202502,'Empty',[return,'Empty'],[chain,['cons-atom',_202314,_202502],_202674,[return,_202674]]]]]]]],[return,['Error',['interpret-tuple',_201992,_202014],"Non-empty expression atom is expected as an argument"]]]]]]],['_ret'=_202674,'_rtail'=_202502,'_rhead'=_202314,'_tail'=_202200,'_head'=_202178,'_space'=_202014,'_atom'=_201992],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(22808,548,70,22808)).
metta_file_buffer(+,'$COMMENT'(";; Helper MinimalMeTTa?",562,0),[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(23383,560,114,23383)).
metta_file_buffer(+,[=,['metta-call',_201886,_201908,_201930],[function,[eval,['if-error',_201886,[return,_201886],[chain,[eval,_201886],_202102,[eval,['if-equal',_202102,'NotReducible',[return,_201886],[eval,['if-equal',_202102,'Empty',[return,'Empty'],[eval,['if-error',_202102,[return,_202102],[chain,[eval,[interpret,_202102,_201908,_201930]],_202484,[return,_202484]]]]]]]]]]]]],['_ret'=_202484,'_result'=_202102,'_space'=_201930,'_type'=_201908,'_atom'=_201886],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(23383,560,114,23383)).
metta_file_buffer(+,'$COMMENT'(";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;",571,0),[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(23777,569,90,23777)).
metta_file_buffer(+,'$COMMENT'("; Standard library written in MeTTa ;",572,0),[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(23777,569,90,23777)).
metta_file_buffer(+,'$COMMENT'(";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;",573,0),[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(23777,569,90,23777)).
metta_file_buffer(+,'$COMMENT'(";; Public MinimalMeTTa?",575,0),[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(23777,569,90,23777)).
metta_file_buffer(+,['@doc','if-equal',['@desc',"Checks if first two arguments are equal and evaluates third argument if equal, fourth argument - otherwise"],['@params',[['@param',"First argument"],['@param',"Second argument"],['@param',"Atom to be evaluated if arguments are equal"],['@param',"Atom to be evaluated if arguments are not equal"]]],['@return',"Evaluated third or fourth argument"]],[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(23777,569,90,23777)).
metta_file_buffer(+,'$COMMENT'(";; Implemented from Interpreters",584,0),[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(24299,583,49,24299)).
metta_file_buffer(+,'$COMMENT'("; TODO: Type is used here, but there is no definition for the -> type",586,0),[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(24299,583,49,24299)).
metta_file_buffer(+,'$COMMENT'("; constructor for instance, thus in practice it matches because -> has",587,0),[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(24299,583,49,24299)).
metta_file_buffer(+,'$COMMENT'("; %Undefined% type. We need to assign proper type to -> and other type",588,0),[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(24299,583,49,24299)).
metta_file_buffer(+,'$COMMENT'("; constructors but it is not possible until we support vararg types.",589,0),[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(24299,583,49,24299)).
metta_file_buffer(+,'$COMMENT'(";; Public MeTTa or Helper?",590,0),[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(24299,583,49,24299)).
metta_file_buffer(+,['@doc','is-function-type',['@desc',"Function checks if input type is a function type"],['@params',[['@param',"Type notation"]]],['@return',"True if input type notation is a function type, False - otherwise"]],[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(24299,583,49,24299)).
metta_file_buffer(+,[:,'is-function-type',[->,'Type','Bool']],[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(24852,595,80,24852)).
metta_file_buffer(+,[=,['is-function-type',_208778],[let,_208816,['get-metatype',_208778],[case,_208816,[['Expression',[let,_208946,['car-atom',_208778],[if,[==,_208946,->],'True','False']]],[_209084,'False']]]]],['__'=_209084,'_first'=_208946,'_type-meta'=_208816,'_type'=_208778],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(24888,596,35,24888)).
metta_file_buffer(+,'$COMMENT'(";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;",606,0),[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(25099,603,21,25099)).
metta_file_buffer(+,'$COMMENT'("; MeTTa interpreter implementation ;",607,0),[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(25099,603,21,25099)).
metta_file_buffer(+,'$COMMENT'(";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;",608,0),[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(25099,603,21,25099)).
metta_file_buffer(+,'$COMMENT'(";; Public MeTTa",610,0),[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(25099,603,21,25099)).
metta_file_buffer(+,['@doc',if,['@desc',"Replace itself by one of the arguments depending on condition."],['@params',[['@param',"Boolean condition"],['@param',"Result when condition is True"],['@param',"Result when condition is False"]]],['@return',"Second or third argument"]],[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(25099,603,21,25099)).
metta_file_buffer(+,[:,if,[->,'Bool','Atom','Atom',_212134]],['_t'=_212134],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(25493,617,40,25493)).
metta_file_buffer(+,'$COMMENT'(";; Implemented from Interpreters",619,0),[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(25523,618,29,25523)).
metta_file_buffer(+,['ALT=',[if,'True',_212422,_212444],_212422],['_else'=_212444,'_then'=_212422],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(25523,618,29,25523)).
metta_file_buffer(+,['ALT=',[if,'False',_212684,_212706],_212706],['_else'=_212706,'_then'=_212684],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(25591,620,34,25591)).
metta_file_buffer(+,'$COMMENT'(";`$then`, `$else` should be of `Atom` type to avoid evaluation",622,0),[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(25627,621,35,25627)).
metta_file_buffer(+,'$COMMENT'("; and infinite cycle in inference",623,0),[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(25627,621,35,25627)).
metta_file_buffer(+,'$COMMENT'(";; Public MeTTa",626,0),[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(25627,621,35,25627)).
metta_file_buffer(+,['@doc',xor,['@desc',"Exclusive disjunction of two arguments"],['@params',[['@param',"First argument"],['@param',"Second argument"]]],['@return',"Return values are the same as logical disjunction, but when both arguments are True xor will return False"]],[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(25627,621,35,25627)).
metta_file_buffer(+,'$COMMENT'(";; Implemented from Interpreters",633,0),[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(26000,632,120,26000)).
metta_file_buffer(+,[:,xor,[->,'Bool','Bool','Bool']],[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(26000,632,120,26000)).
metta_file_buffer(+,'$COMMENT'(";; Public MeTTa",636,0),[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(26061,634,27,26061)).
metta_file_buffer(+,['@doc',flip,['@desc',"Produces random boolean value"],['@params',[]],['@return',"Random boolean value"]],[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(26061,634,27,26061)).
metta_file_buffer(+,'$COMMENT'(";; Implemented from Interpreters",641,0),[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(26182,640,35,26182)).
metta_file_buffer(+,'$COMMENT'(";; Public MeTTa",643,0),[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(26182,640,35,26182)).
metta_file_buffer(+,['@doc',or,['@desc',"Logical disjunction of two arguments"],['@params',[['@param',"First argument"],['@param',"Second argument"]]],['@return',"True if any of input arguments is True, False - otherwise"]],[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(26182,640,35,26182)).
metta_file_buffer(+,[:,or,[->,'Bool','Bool','Bool']],[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(26439,649,72,26439)).
metta_file_buffer(+,'$COMMENT'(";; Implemented from Interpreters",651,0),[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(26466,650,26,26466)).
metta_file_buffer(+,['ALT=',[or,'False','False'],'False'],[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(26466,650,26,26466)).
metta_file_buffer(+,['ALT=',[or,'False','True'],'True'],[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(26529,652,29,26529)).
metta_file_buffer(+,['ALT=',[or,'True','False'],'True'],[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(26557,653,27,26557)).
metta_file_buffer(+,['ALT=',[or,'True','True'],'True'],[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(26585,654,27,26585)).
metta_file_buffer(+,'$COMMENT'(";; Public MeTTa",657,0),[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(26612,655,26,26612)).
metta_file_buffer(+,['@doc',and,['@desc',"Logical conjunction of two arguments"],['@params',[['@param',"First argument"],['@param',"Second argument"]]],['@return',"Returns True if both arguments are True, False - otherwise"]],[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(26612,655,26,26612)).
metta_file_buffer(+,[:,and,[->,'Bool','Bool','Bool']],[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(26838,663,73,26838)).
metta_file_buffer(+,'$COMMENT'(";; Implemented from Interpreters",665,0),[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(26866,664,27,26866)).
metta_file_buffer(+,['ALT=',[and,'False','False'],'False'],[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(26866,664,27,26866)).
metta_file_buffer(+,['ALT=',[and,'False','True'],'False'],[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(26930,666,30,26930)).
metta_file_buffer(+,['ALT=',[and,'True','False'],'False'],[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(26960,667,29,26960)).
metta_file_buffer(+,['ALT=',[and,'True','True'],'True'],[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(26990,668,29,26990)).
metta_file_buffer(+,'$COMMENT'(";; Public MeTTa",671,0),[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(27018,669,27,27018)).
metta_file_buffer(+,['@doc',not,['@desc',"Logical negation"],['@params',[['@param',"Argument"]]],['@return',"Negates boolean input argument (False -> True, True -> False)"]],[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(27018,669,27,27018)).
metta_file_buffer(+,[:,not,[->,'Bool','Bool']],[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(27190,676,76,27190)).
metta_file_buffer(+,'$COMMENT'(";; Implemented from Interpreters",678,0),[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(27213,677,22,27213)).
metta_file_buffer(+,['ALT=',[not,'True'],'False'],[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(27213,677,22,27213)).
metta_file_buffer(+,['ALT=',[not,'False'],'True'],[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(27270,679,23,27270)).
metta_file_buffer(+,'$COMMENT'(";; Public MeTTa",682,0),[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(27294,680,23,27294)).
metta_file_buffer(+,['@doc',let,['@desc',"Let function is utilized to establish temporary variable bindings within an expression. It allows introducing variables (first argument), assign values to them (second argument), and then use these values within the scope of the let block"],['@params',[['@param',"Variable name (or several variables inside brackets ())"],['@param',"Expression to be bound to variable (it is being reduced before bind)"],['@param',"Expression which will be reduced and in which variable (first argument) could be used"]]],['@return',"Result of third argument's evaluation"]],[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(27294,680,23,27294)).
metta_file_buffer(+,'$COMMENT'(";; Public MeTTa",691,0),[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(27896,689,52,27896)).
metta_file_buffer(+,[:,let,[->,'Atom','%Undefined%','Atom','Atom']],[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(27896,689,52,27896)).
metta_file_buffer(+,'$COMMENT'(";; Implemented from Interpreters",693,0),[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(27953,692,39,27953)).
metta_file_buffer(+,['ALT=',[let,_233308,_233330,_233352],['if-unify',_233330,_233308,_233352,'Empty']],['_template'=_233352,'_atom'=_233330,'_pattern'=_233308],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(27953,692,39,27953)).
metta_file_buffer(+,'$COMMENT'(";; Public MeTTa",697,0),[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(28068,695,44,28068)).
metta_file_buffer(+,['@doc','let*',['@desc',"Same as let, but first argument is a tuple containing tuples of variables and their bindings, e.g. (($v (+ 1 2)) ($v2 (* 5 6)))"],['@params',[['@param',"Tuple of tuples with variables and their bindings"],['@param',"Expression which will be reduced and in which variable (first argument) could be used"]]],['@return',"Result of second argument's evaluation"]],[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(28068,695,44,28068)).
metta_file_buffer(+,[:,'let*',[->,'Expression','Atom','Atom']],[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(28471,703,53,28471)).
metta_file_buffer(+,'$COMMENT'(";; Implemented from Interpreters",705,0),[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(28506,704,34,28506)).
metta_file_buffer(+,['ALT=',['let*',_240028,_240050],[eval,['if-decons-expr',_240028,[_240130,_240152],_240174,[let,_240130,_240152,['let*',_240174,_240050]],_240050]]],['_tail'=_240174,'_atom'=_240152,'_pattern'=_240130,'_template'=_240050,'_pairs'=_240028],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(28506,704,34,28506)).
metta_file_buffer(+,'$COMMENT'(";; Public MeTTa?",712,0),[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(28689,709,17,28689)).
metta_file_buffer(+,[:>,'hyperon::space::DynSpace','Grounded'],[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(28689,709,17,28689)).
metta_file_buffer(+,[:,stringToChars,[->,'String','Expression']],[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(28747,713,38,28747)).
metta_file_buffer(+,[:,charsToString,[->,'Expression','String']],[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(28789,715,40,28789)).
metta_file_buffer(+,[:,parse,[->,'String','Atom']],[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(28830,716,40,28830)).
metta_file_buffer(+,[:,repr,[->,'Atom','String']],[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(28857,717,26,28857)).
metta_file_buffer(+,'$COMMENT'(";; Public MeTTa",720,0),[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(28883,718,25,28883)).
metta_file_buffer(+,['@doc','add-reduct',['@desc',"Prevents atom from being reduced"],['@params',[['@param',"Atom"]]],['@return',"Quoted atom"]],[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(28883,718,25,28883)).
metta_file_buffer(+,'$COMMENT'(";; Implemented from Interpreters",726,0),[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(29024,725,26,29024)).
metta_file_buffer(+,['@doc','add-reduct-rust1',['@desc',"Adds atom into the atomspace reducing it first"],['@params',[['@param',"Atomspace to add atom into"],['@param',"Atom to add"]]],['@return',"Unit atom"]],[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(29024,725,26,29024)).
metta_file_buffer(+,[:,'add-reduct-rust1',[->,'hyperon::space::DynSpace','%Undefined%',[->]]],[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(29248,732,24,29248)).
metta_file_buffer(+,[=,['add-reduct-minimal',_245970,_245992],['add-atom',_245970,_245992]],['_atom'=_245992,'_dst'=_245970],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(29319,734,67,29319)).
metta_file_buffer(+,'$COMMENT'(";; Public MeTTa",736,0),[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(29377,735,57,29377)).
metta_file_buffer(+,[:,'add-reduct',[->,'Grounded','%Undefined%',[->]]],[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(29377,735,57,29377)).
metta_file_buffer(+,[=,['add-reduct',_246786,_246808],['add-atom',_246786,_246808]],['_atom'=_246808,'_dst'=_246786],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(29439,737,45,29439)).
metta_file_buffer(+,'$COMMENT'(";; Public MeTTa",740,0),[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(29489,738,49,29489)).
metta_file_buffer(+,['@doc','car-atom',['@desc',"Extracts the first atom of an expression as a tuple"],['@params',[['@param',"Expression"]]],['@return',"First atom of an expression"]],[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(29489,738,49,29489)).
metta_file_buffer(+,'$COMMENT'(";; Implemented from Interpreters",746,0),[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(29669,745,42,29669)).
metta_file_buffer(+,[:,'car-atom',[->,'Expression','Atom']],[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(29669,745,42,29669)).
metta_file_buffer(+,[=,['car-atom',_248856],[eval,['if-decons-expr',_248856,_248928,_248950,_248928,['Error',['car-atom',_248856],"car-atom expects a non-empty expression as an argument"]]]],['__'=_248950,'_head'=_248928,'_atom'=_248856],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(29736,747,33,29736)).
metta_file_buffer(+,'$COMMENT'(";; Public MeTTa",753,0),[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(29895,751,89,29895)).
metta_file_buffer(+,['@doc','cdr-atom',['@desc',"Extracts the tail of an expression (all except first atom)"],['@params',[['@param',"Expression"]]],['@return',"Tail of an expression"]],[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(29895,751,89,29895)).
metta_file_buffer(+,[:,'cdr-atom',[->,'Expression','Expression']],[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(30076,758,36,30076)).
metta_file_buffer(+,'$COMMENT'(";; Implemented from Interpreters",760,0),[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(30116,759,39,30116)).
metta_file_buffer(+,[=,['cdr-atom',_250918],[eval,['if-decons-expr',_250918,_250990,_251012,_251012,['Error',['cdr-atom',_250918],"cdr-atom expects a non-empty expression as an argument"]]]],['_tail'=_251012,'__'=_250990,'_atom'=_250918],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(30116,759,39,30116)).
metta_file_buffer(+,'$COMMENT'(";; Public MeTTa",766,0),[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(30308,764,89,30308)).
metta_file_buffer(+,['@doc',quote,['@desc',"Prevents atom from being reduced"],['@params',[['@param',"Atom"]]],['@return',"Quoted atom"]],[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(30308,764,89,30308)).
metta_file_buffer(+,'$COMMENT'(";; Implemented from Interpreters",772,0),[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(30444,771,26,30444)).
metta_file_buffer(+,[:,quote,[->,'Atom','Atom']],[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(30444,771,26,30444)).
metta_file_buffer(+,[=,[quote,_252574],'NotReducible'],['_atom'=_252574],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(30502,773,24,30502)).
metta_file_buffer(+,'$COMMENT'(";; Public MeTTa",776,0),[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(30533,774,30,30533)).
metta_file_buffer(+,['@doc',unquote,['@desc',"Unquotes quoted atom, e.g. (unquote (quote $x)) returns $x"],['@params',[['@param',"Quoted atom"]]],['@return',"Unquoted atom"]],[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(30533,774,30,30533)).
metta_file_buffer(+,'$COMMENT'(";; Implemented from Interpreters",782,0),[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(30706,781,28,30706)).
metta_file_buffer(+,[:,unquote,[->,'%Undefined%','%Undefined%']],[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(30706,781,28,30706)).
metta_file_buffer(+,[=,[unquote,[quote,_255740]],_255740],['_atom'=_255740],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(30780,783,40,30780)).
metta_file_buffer(+,'$COMMENT'("; TODO: there is no way to define operation which consumes any number of",786,0),[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(30814,784,33,30814)).
metta_file_buffer(+,'$COMMENT'("; arguments  and returns unit",787,0),[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(30814,784,33,30814)).
metta_file_buffer(+,'$COMMENT'(";; Public MeTTa",788,0),[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(30814,784,33,30814)).
metta_file_buffer(+,['@doc',nop,['@desc',"Outputs unit atom for any input"],['@params',[['@param',"Anything"]]],['@return',"Unit atom"]],[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(30814,784,33,30814)).
metta_file_buffer(+,[:,nop,[->,'Atom',[->]]],[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(31052,793,24,31052)).
metta_file_buffer(+,'$COMMENT'(";; Implemented from Interpreters",795,0),[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(31075,794,22,31075)).
metta_file_buffer(+,['ALT=',[nop,_257950],[]],['_x'=_257950],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(31075,794,22,31075)).
metta_file_buffer(+,[:,nop,[->,'EmptyType']],[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(31127,796,18,31127)).
metta_file_buffer(+,['ALT=',[nop],[]],[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(31150,797,22,31150)).
metta_file_buffer(+,'$COMMENT'(";; Public MeTTa",800,0),[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(31166,798,15,31166)).
metta_file_buffer(+,['@doc',empty,['@desc',"Cuts evaluation of the non-deterministic branch and removes it from the result"],['@params',[]],['@return',"Nothing"]],[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(31166,798,15,31166)).
metta_file_buffer(+,[:,empty,[->,'%Undefined%']],[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(31324,804,22,31324)).
metta_file_buffer(+,'$COMMENT'(";; Implemented from Interpreters",806,0),[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(31351,805,26,31351)).
metta_file_buffer(+,'$COMMENT'("; (ALT= (empty) (let a b never-happens))",807,0),[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(31351,805,26,31351)).
metta_file_buffer(+,'$COMMENT'(";For testing",808,0),[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(31351,805,26,31351)).
metta_file_buffer(+,'$COMMENT'(";(= (empty) Empty)",809,0),[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(31351,805,26,31351)).
metta_file_buffer(+,'$COMMENT'(";(= (empty-rust1) (let a b never-happens))",811,0),[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(31351,805,26,31351)).
metta_file_buffer(+,'$COMMENT'("; TODO: MINIMAL added for compatibility, remove after migration",812,0),[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(31351,805,26,31351)).
metta_file_buffer(+,'$COMMENT'(";(= (empty-minimal) Empty)",813,0),[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(31351,805,26,31351)).
metta_file_buffer(+,'$COMMENT'(";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;",815,0),[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(31351,805,26,31351)).
metta_file_buffer(+,'$COMMENT'("; Documentation formatting functions",816,0),[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(31351,805,26,31351)).
metta_file_buffer(+,'$COMMENT'(";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;",817,0),[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(31351,805,26,31351)).
metta_file_buffer(+,'$COMMENT'(";; Public MeTTa",819,0),[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(31351,805,26,31351)).
metta_file_buffer(+,['@doc','@doc',['@desc',"Used for documentation purposes. Function documentation starts with @doc"],['@params',[['@param',"Function name"],['@param',"Function description. Starts with @desc"],['@param',"(Optional) parameters description starting with @params which should contain one or more @param symbols"],['@param',"(Optional) description of what function will return. Starts with @return"]]],['@return',"Function documentation using @doc-formal"]],[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(31351,805,26,31351)).
metta_file_buffer(+,[:,'@doc',[->,'Atom','DocDescription','DocInformal']],[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(32179,827,55,32179)).
metta_file_buffer(+,[:,'@doc',[->,'Atom','DocDescription','DocParameters','DocReturnInformal','DocInformal']],[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(32225,828,45,32225)).
metta_file_buffer(+,'$COMMENT'(";; Is Data Functor",830,0),[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(32303,829,77,32303)).
metta_file_buffer(+,'$COMMENT'(";; Public MeTTa",832,0),[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(32303,829,77,32303)).
metta_file_buffer(+,['@doc','@desc',['@desc',"Used for documentation purposes. Description of function starts with @desc as a part of @doc"],['@params',[['@param',"String containing function description"]]],['@return',"Function description"]],[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(32303,829,77,32303)).
metta_file_buffer(+,[:,'@desc',[->,'String','DocDescription']],[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(32561,837,35,32561)).
metta_file_buffer(+,'$COMMENT'(";; Is Data Functor",839,0),[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(32598,838,36,32598)).
metta_file_buffer(+,'$COMMENT'(";; Public MeTTa",841,0),[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(32598,838,36,32598)).
metta_file_buffer(+,['@doc','@param',['@desc',"Used for documentation purposes. Description of function parameter starts with @param as a part of @params which is a part of @doc"],['@params',[['@param',"String containing parameter description"]]],['@return',"Parameter description"]],[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(32598,838,36,32598)).
metta_file_buffer(+,[:,'@param',[->,'String','DocParameterInformal']],[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(32897,846,36,32897)).
metta_file_buffer(+,[:,'@param',[->,'DocType','DocDescription','DocParameter']],[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(32941,847,43,32941)).
metta_file_buffer(+,'$COMMENT'(";; Is Data Functor",849,0),[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(32993,848,51,32993)).
metta_file_buffer(+,'$COMMENT'(";; Public MeTTa",851,0),[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(32993,848,51,32993)).
metta_file_buffer(+,['@doc','@return',['@desc',"Used for documentation purposes. Description of function return value starts with @return as a part of @doc"],['@params',[['@param',"String containing return value description"]]],['@return',"Return value description"]],[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(32993,848,51,32993)).
metta_file_buffer(+,[:,'@return',[->,'String','DocReturnInformal']],[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(33276,856,39,33276)).
metta_file_buffer(+,[:,'@return',[->,'DocType','DocDescription','DocReturn']],[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(33318,857,41,33318)).
metta_file_buffer(+,'$COMMENT'(";; Is Data Functor",859,0),[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(33368,858,49,33368)).
metta_file_buffer(+,'$COMMENT'(";; Public MeTTa",861,0),[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(33368,858,49,33368)).
metta_file_buffer(+,['@doc','@doc-formal',['@desc',"Used for documentation purposes. get-doc returns documentation starting with @doc-formal symbol. @doc-formal contains 6 or 4 parameters depending on the entity being described (functions being described using 6 parameters, atoms - 4 parameters)"],['@params',[['@param',"Function/Atom name for which documentation is to be displayed. Format (@item name)"],['@param',"Contains (@kind function) or (@kind atom) depends on entity which documentation is displayed"],['@param',"Contains type notation of function/atom"],['@param',"Function/atom description"],['@param',"(Functions only). Description of function parameters"],['@param',"(Functions only). Description of function's return value"]]],['@return',"Expression containing full documentation on function"]],[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(33368,858,49,33368)).
metta_file_buffer(+,[:,'@doc-formal',[->,'DocItem','DocKindFunction','DocType','DocDescription','DocParameters','DocReturn','DocFormal']],[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(34204,871,67,34204)).
metta_file_buffer(+,[:,'@doc-formal',[->,'DocItem','DocKindAtom','DocType','DocDescription','DocFormal']],[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(34306,872,101,34306)).
metta_file_buffer(+,'$COMMENT'(";; Is Data Functor",874,0),[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(34380,873,73,34380)).
metta_file_buffer(+,'$COMMENT'(";; Public MeTTa",876,0),[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(34380,873,73,34380)).
metta_file_buffer(+,['@doc','@item',['@desc',"Used for documentation purposes. Converts atom/function's name to DocItem"],['@params',[['@param',"Atom/Function name to be documented"]]],['@return',"(@item Atom) entity"]],[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(34380,873,73,34380)).
metta_file_buffer(+,[:,'@item',[->,'Atom','DocItem']],[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(34615,881,34,34615)).
metta_file_buffer(+,'$COMMENT'(";; Is Data Functor",883,0),[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(34643,882,27,34643)).
metta_file_buffer(+,'$COMMENT'("; TODO: help! gives two outputs",885,0),[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(34643,882,27,34643)).
metta_file_buffer(+,'$COMMENT'(";Atom (@kind function): (%Undefined% (-> Atom Atom)) Used for documentation purposes. Shows type of entity to be documented. (@kind function) in this case",886,0),[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(34643,882,27,34643)).
metta_file_buffer(+,'$COMMENT'(";Atom (@kind function): DocKindFunction Used for documentation purposes. Shows type of entity to be documented. (@kind function) in this case",887,0),[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(34643,882,27,34643)).
metta_file_buffer(+,'$COMMENT'(";; Public MeTTa",888,0),[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(34643,882,27,34643)).
metta_file_buffer(+,['@doc',['@kind',function],['@desc',"Used for documentation purposes. Shows type of entity to be documented. (@kind function) in this case"]],[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(34643,882,27,34643)).
metta_file_buffer(+,[:,['@kind',function],'DocKindFunction'],[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(35146,890,114,35146)).
metta_file_buffer(+,'$COMMENT'(";; Is Data Functor",892,0),[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(35183,891,36,35183)).
metta_file_buffer(+,'$COMMENT'(";; Public MeTTa",894,0),[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(35183,891,36,35183)).
metta_file_buffer(+,['@doc',['@kind',atom],['@desc',"Used for documentation purposes. Shows type of entity to be documented. (@kind atom) in this case"]],[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(35183,891,36,35183)).
metta_file_buffer(+,[:,['@kind',atom],'DocKindAtom'],[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(35349,896,110,35349)).
metta_file_buffer(+,'$COMMENT'(";; Is Data Functor",898,0),[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(35378,897,28,35378)).
metta_file_buffer(+,'$COMMENT'(";; Public MeTTa",900,0),[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(35378,897,28,35378)).
metta_file_buffer(+,['@doc','@type',['@desc',"Used for documentation purposes. Converts atom/function's type to DocType"],['@params',[['@param',"Atom/Function type to be documented"]]],['@return',"(@type Type) entity"]],[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(35378,897,28,35378)).
metta_file_buffer(+,[:,'@type',[->,'Type','DocType']],[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(35613,905,34,35613)).
metta_file_buffer(+,'$COMMENT'(";; Is Data Functor",907,0),[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(35641,906,27,35641)).
metta_file_buffer(+,'$COMMENT'(";; Public MeTTa",909,0),[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(35641,906,27,35641)).
metta_file_buffer(+,['@doc','@params',['@desc',"Used for function documentation purposes. Contains several @param entities with description of each @param"],['@params',[['@param',"Several (@param ...) entities"]]],['@return',"DocParameters containing description of all parameters of function in form of (@params ((@param ...) (@param ...) ...))"]],[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(35641,906,27,35641)).
metta_file_buffer(+,[:,'@params',[->,'Expression','DocParameters']],[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(36005,914,134,36005)).
metta_file_buffer(+,'$COMMENT'(";; Is Data Functor",916,0),[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(36047,915,41,36047)).
metta_file_buffer(+,'$COMMENT'(";; Public MeTTa",918,0),[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(36047,915,41,36047)).
metta_file_buffer(+,['@doc','metta-get-doc',['@desc',"Returns documentation for the given Atom/Function"],['@params',[['@param',"Atom/Function name for which documentation is needed"]]],['@return',"Documentation for the given atom/function"]],[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(36047,915,41,36047)).
metta_file_buffer(+,[:,'metta-get-doc',[->,'Atom','Atom']],[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(36305,923,56,36305)).
metta_file_buffer(+,[=,['metta-get-doc',_303132],[let,_303170,['get-metatype',_303132],[case,_303170,[['Expression',['get-doc-atom',_303132]],[_303326,['get-doc-single-atom',_303132]]]]]],['__'=_303326,'_meta-type'=_303170,'_atom'=_303132],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(36338,924,32,36338)).
metta_file_buffer(+,'$COMMENT'(";; Helper Library",931,0),[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(36509,929,43,36509)).
metta_file_buffer(+,['@doc','get-doc-single-atom',['@desc',"Function used by get-doc to get documentation on either function or atom. It checks if input name is the name of function or atom and calls correspondent function"],['@params',[['@param',"Atom/Function name for which documentation is needed"]]],['@return',"Documentation for the given atom/function"]],[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(36509,929,43,36509)).
metta_file_buffer(+,[:,'get-doc-single-atom',[->,'Atom','Atom']],[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(36869,936,56,36869)).
metta_file_buffer(+,[=,['get-doc-single-atom',_307814],[let,_307852,['mod-space!',top],[let,_307914,['get-type-space',_307852,_307814],[if,['is-function-type',_307914],['get-doc-function',_307814,_307914],['get-doc-atom',_307814]]]]],['_type'=_307914,'_top-space'=_307852,'_atom'=_307814],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(36908,937,38,36908)).
metta_file_buffer(+,'$COMMENT'(";; Helper Library",945,0),[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(37123,943,31,37123)).
metta_file_buffer(+,['@doc','get-doc-function',['@desc',"Function used by get-doc-single-atom to get documentation on a function. It returns documentation on a function if it exists or default documentation with no description otherwise"],['@params',[['@param',"Function name for which documentation is needed"],['@param',"Type notation for this function"]]],['@return',"Documentation for the given function"]],[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(37123,943,31,37123)).
metta_file_buffer(+,[:,'get-doc-function',[->,'Atom','Type','Atom']],[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(37534,951,51,37534)).
metta_file_buffer(+,[=,['get-doc-function',_320188,_320210],[let,_320248,['mod-space!',top],[unify,_320248,['@doc',_320188,_320362,['@params',_320400],_320422],[let,_320460,[if,[==,_320210,'%Undefined%'],['undefined-doc-function-type',_320400],['cdr-atom',_320210]],[let,[_320632,_320654],['get-doc-params',_320400,_320422,_320460],['@doc-formal',['@item',_320188],['@kind',function],['@type',_320210],_320362,['@params',_320632],_320654]]],['@doc-formal',['@item',_320188],['@kind',function],['@type',_320210],['@desc',"No documentation"]]]]],['_ret\''=_320654,'_params\''=_320632,'_type\''=_320460,'_ret'=_320422,'_params'=_320400,'_desc'=_320362,'_top-space'=_320248,'_type'=_320210,'_name'=_320188],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(37575,952,40,37575)).
metta_file_buffer(+,'$COMMENT'(";; Helper Library",961,0),[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(38060,959,93,38060)).
metta_file_buffer(+,['@doc','undefined-doc-function-type',['@desc',"Function used by get-doc-single-atom in case of absence of function's type notation"],['@params',[['@param',"List of parameters for the function we want to get documentation for"]]],['@return',"List of %Undefined% number of which depends on input list size. So for two parameters function will return (%Undefined% %Undefined% %Undefined%)"]],[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(38060,959,93,38060)).
metta_file_buffer(+,[:,'undefined-doc-function-type',[->,'Expression','Type']],[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(38468,966,159,38468)).
metta_file_buffer(+,[=,['undefined-doc-function-type',_325712],[if,[==,[],_325712],['%Undefined%'],[let,_325824,['cdr-atom',_325712],[let,_325896,['undefined-doc-function-type',_325824],['cons-atom','%Undefined%',_325896]]]]],['_tail'=_325896,'_params-tail'=_325824,'_params'=_325712],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(38521,967,52,38521)).
metta_file_buffer(+,'$COMMENT'(";; Helper Library",974,0),[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(38738,972,40,38738)).
metta_file_buffer(+,['@doc','get-doc-params',['@desc',"Function used by get-doc-function to get function's parameters documentation (including return value)"],['@params',[['@param',"List of parameters in form of ((@param Description) (@param Description)...)"],['@param',"Return value's description in form of (@return Description)"],['@param',"Type notation without -> starting symbol e.g. (Atom Atom Atom)"]]],['@return',"United list of params and return value each augmented with its type. E.g. (((@param (@type Atom) (@desc Description)) (@param (@type Atom) (@desc Description2))) (@return (@type Atom) (@desc Description)))"]],[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(38738,972,40,38738)).
metta_file_buffer(+,[:,'get-doc-params',[->,'Expression','Atom','Expression',['Expression','Atom']]],[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(39373,981,220,39373)).
metta_file_buffer(+,[=,['get-doc-params',_337956,_337978,_338000],[let,_338038,['car-atom',_338000],[let,_338110,['cdr-atom',_338000],[if,[==,[],_337956],[let,['@return',_338256],_337978,[[],['@return',['@type',_338038],['@desc',_338256]]]],[let,['@param',_338428],['car-atom',_337956],[let,_338500,['cdr-atom',_337956],[let,[_338580,_338602],['get-doc-params',_338500,_337978,_338110],[let,_338710,['cons-atom',['@param',['@type',_338038],['@desc',_338428]],_338580],[_338710,_338602]]]]]]]]],['_result-params'=_338710,'_result-ret'=_338602,'_params\''=_338580,'_tail-params'=_338500,'_param-desc'=_338428,'_ret-desc'=_338256,'_tail-types'=_338110,'_head-type'=_338038,'_types'=_338000,'_ret'=_337978,'_params'=_337956],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(39442,982,68,39442)).
metta_file_buffer(+,'$COMMENT'(";; Helper Library",995,0),[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(40001,993,47,40001)).
metta_file_buffer(+,['@doc','get-doc-atom',['@desc',"Function used by get-doc (in case of input type Expression) and get-doc-single-atom (in case input value is not a function) to get documentation on input value"],['@params',[['@param',"Atom's name to get documentation for"]]],['@return',"Documentation on input Atom"]],[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(40001,993,47,40001)).
metta_file_buffer(+,[:,'get-doc-atom',[->,'Atom','Atom']],[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(40321,1000,42,40321)).
metta_file_buffer(+,[=,['get-doc-atom',_347804],[let,_347842,['mod-space!',top],[let,_347904,['get-type-space',_347842,_347804],[unify,_347842,['@doc',_347804,_348046],['@doc-formal',['@item',_347804],['@kind',atom],['@type',_347904],_348046],[unify,_347842,['@doc',_347804,_348262,['@params',_348300],_348322],['get-doc-function',_347804,'%Undefined%'],['@doc-formal',['@item',_347804],['@kind',atom],['@type',_347904],['@desc',"No documentation"]]]]]]],['_ret'=_348322,'_params'=_348300,'_desc\''=_348262,'_desc'=_348046,'_type'=_347904,'_top-space'=_347842,'_atom'=_347804],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(40353,1001,31,40353)).
metta_file_buffer(+,'$COMMENT'(";; Public MeTTa",1011,0),[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(40775,1009,95,40775)).
metta_file_buffer(+,['@doc','metta-help!',['@desc',"Function prints documentation for the input atom."],['@params',[['@param',"Input to get documentation for"]]],['@return',"Unit atom"]],[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(40775,1009,95,40775)).
metta_file_buffer(+,[:,'metta-help!',[->,'Atom',[->]]],[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(40958,1016,24,40958)).
metta_file_buffer(+,[=,['metta-help!',_363064],[case,['get-doc',_363064],[[['@doc-formal',['@item',_363184],['@kind',function],['@type',_363246],['@desc',_363284],['@params',_363322],['@return',['@type',_363376],['@desc',_363414]]],[let,[],['println!',['format-args',"Function {}: {} {}",[_363184,_363246,_363284]]],[let,[],['println!',['format-args',"Parameters:",[]]],[let,[],['for-each-in-atom',_363322,'help-param!'],[let,[],['println!',['format-args',"Return: (type {}) {}",[_363376,_363414]]],[]]]]]],[['@doc-formal',['@item',_363184],['@kind',function],['@type',_363246],['@desc',_363284]],[let,[],['println!',['format-args',"Function {} (type {}) {}",[_363184,_363246,_363284]]],[]]],[['@doc-formal',['@item',_363184],['@kind',atom],['@type',_363246],['@desc',_363284]],[let,[],['println!',['format-args',"Atom {}: {} {}",[_363184,_363246,_363284]]],[]]],[_364392,['Error',_364392,"Cannot match @doc-formal structure"]]]]],['_other'=_364392,'_ret-desc'=_363414,'_ret-type'=_363376,'_params'=_363322,'_descr'=_363284,'_type'=_363246,'_item'=_363184,'_atom'=_363064],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(40989,1017,30,40989)).
metta_file_buffer(+,'$COMMENT'(";; Helper Library",1036,0),[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(41915,1034,68,41915)).
metta_file_buffer(+,['@doc','help-param!',['@desc',"Function used by function help! to output parameters using println!"],['@params',[['@param',"Parameters list"]]],['@return',"Unit atom"]],[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(41915,1034,68,41915)).
metta_file_buffer(+,[:,'help-param!',[->,'Atom',[->]]],[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(42103,1041,24,42103)).
metta_file_buffer(+,[=,['help-param!',_366798],[let,['@param',['@type',_366868],['@desc',_366906]],_366798,['println!',['format-args',"  {} {}",[[type,_366868],_366906]]]]],['_desc'=_366906,'_type'=_366868,'_param'=_366798],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(42134,1042,30,42134)).
metta_file_buffer(+,'$COMMENT'(";; Helper Library",1047,0),[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(42272,1045,62,42272)).
metta_file_buffer(+,['@doc','for-each-in-atom',['@desc',"Applies function passed as a second argument to each atom inside first argument"],['@params',[['@param',"Expression to each atom in which function will be applied"],['@param',"Function to apply"]]],['@return',"Unit atom"]],[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(42272,1045,62,42272)).
metta_file_buffer(+,[:,'for-each-in-atom',[->,'Expression','Atom',[->]]],[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(42552,1053,24,42552)).
metta_file_buffer(+,[=,['for-each-in-atom',_370156,_370178],[if,['noreduce-eq',_370156,[]],[],[let,_370282,['car-atom',_370156],[let,_370354,['cdr-atom',_370156],[let,_370426,[_370178,_370282],['for-each-in-atom',_370354,_370178]]]]]],['__'=_370426,'_tail'=_370354,'_head'=_370282,'_func'=_370178,'_expr'=_370156],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(42599,1054,46,42599)).
metta_file_buffer(+,'$COMMENT'(";; Helper Library",1063,0),[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(42806,1061,42,42806)).
metta_file_buffer(+,['@doc','noreduce-eq',['@desc',"Checks equality of two atoms without reducing them"],['@params',[['@param',"First atom"],['@param',"Second atom"]]],['@return',"True if not reduced atoms are equal, False - otherwise"]],[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(42806,1061,42,42806)).
metta_file_buffer(+,[:,'noreduce-eq',[->,'Atom','Atom','Bool']],[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(43044,1069,69,43044)).
metta_file_buffer(+,[=,['noreduce-eq',_372372,_372394],[==,[quote,_372372],[quote,_372394]]],['_b'=_372394,'_a'=_372372],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(43080,1070,35,43080)).
metta_file_buffer(+,'$COMMENT'(";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;",1073,0),[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(43131,1071,50,43131)).
metta_file_buffer(+,'$COMMENT'("; Grounded function's documentation",1074,0),[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(43131,1071,50,43131)).
metta_file_buffer(+,'$COMMENT'(";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;",1075,0),[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(43131,1071,50,43131)).
metta_file_buffer(+,'$COMMENT'(";; Public MeTTa",1077,0),[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(43131,1071,50,43131)).
metta_file_buffer(+,['@doc','add-atom',['@desc',"Adds atom into the atomspace without reducing it"],['@params',[['@param',"Atomspace to add atom into"],['@param',"Atom to add"]]],['@return',"Unit atom"]],[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(43131,1071,50,43131)).
metta_file_buffer(+,[:,'add-atom',[->,'hyperon::space::DynSpace','Atom',[->]]],[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(43442,1083,24,43442)).
metta_file_buffer(+,'$COMMENT'(";; Implemented from Interpreters",1085,0),[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(43495,1084,52,43495)).
metta_file_buffer(+,'$COMMENT'(";; Public MeTTa",1087,0),[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(43495,1084,52,43495)).
metta_file_buffer(+,['@doc','new-space',['@desc',"Creates new Atomspace which could be used further in the program as a separate from &self Atomspace"],['@params',[]],['@return',"Reference to a new space"]],[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(43495,1084,52,43495)).
metta_file_buffer(+,[:,'new-space',[->,'hyperon::space::DynSpace']],[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(43728,1091,39,43728)).
metta_file_buffer(+,'$COMMENT'(";; Implemented from Interpreters",1093,0),[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(43772,1092,43,43772)).
metta_file_buffer(+,'$COMMENT'(";; Public MeTTa",1095,0),[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(43772,1092,43,43772)).
metta_file_buffer(+,['@doc','remove-atom',['@desc',"Removes atom from the input Atomspace"],['@params',[['@param',"Reference to the space from which the Atom needs to be removed"],['@param',"Atom to be removed"]]],['@return',"Unit atom"]],[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(43772,1092,43,43772)).
metta_file_buffer(+,[:,'remove-atom',[->,'hyperon::space::DynSpace','Atom',[->]]],[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(44042,1101,24,44042)).
metta_file_buffer(+,'$COMMENT'(";; Implemented from Interpreters",1103,0),[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(44098,1102,55,44098)).
metta_file_buffer(+,'$COMMENT'(";; Public MeTTa",1105,0),[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(44098,1102,55,44098)).
metta_file_buffer(+,['@doc','get-atoms',['@desc',"Shows all atoms in the input Atomspace"],['@params',[['@param',"Reference to the space"]]],['@return',"List of all atoms in the input space"]],[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(44098,1102,55,44098)).
metta_file_buffer(+,[:,'get-atoms',[->,'hyperon::space::DynSpace','Atom']],[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(44320,1110,51,44320)).
metta_file_buffer(+,'$COMMENT'(";; Implemented from Interpreters",1114,0),[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(44370,1112,48,44370)).
metta_file_buffer(+,'$COMMENT'(";; Public MeTTa",1116,0),[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(44370,1112,48,44370)).
metta_file_buffer(+,['@doc','new-state',['@desc',"Creates a new state atom wrapping its argument"],['@params',[['@param',"Atom to be wrapped"]]],['@return',"Returns (State $value) where $value is an argument to a new-state"]],[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(44370,1112,48,44370)).
metta_file_buffer(+,[:,'new-state',[->,_387464,['StateMonad',_387464]]],['_tnso'=_387464],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(44626,1121,80,44626)).
metta_file_buffer(+,'$COMMENT'(";; Implemented from Interpreters",1123,0),[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(44670,1122,43,44670)).
metta_file_buffer(+,'$COMMENT'(";; Public MeTTa",1125,0),[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(44670,1122,43,44670)).
metta_file_buffer(+,['@doc','change-state!',['@desc',"Changes input state's wrapped atom to another value (second argument). E.g. (change-state! (State 5) 6) -> (State 6)"],['@params',[['@param',"State created by new-state function"],['@param',"Atom which will replace wrapped atom in the input state"]]],['@return',"State with replaced wrapped atom"]],[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(44670,1122,43,44670)).
metta_file_buffer(+,[:,'change-state!',[->,['StateMonad',_391888],_391888,['StateMonad',_391888]]],['_tcso'=_391888],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(45054,1131,47,45054)).
metta_file_buffer(+,'$COMMENT'(";; Implemented from Interpreters",1133,0),[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(45121,1132,66,45121)).
metta_file_buffer(+,'$COMMENT'(";; Public MeTTa",1135,0),[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(45121,1132,66,45121)).
metta_file_buffer(+,['@doc','get-state',['@desc',"Gets a state as an argument and returns its wrapped atom. E.g. (get-state (State 5)) -> 5"],['@params',[['@param',"State"]]],['@return',"Atom wrapped by state"]],[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(45121,1132,66,45121)).
metta_file_buffer(+,[:,'get-state',[->,['StateMonad',_394296],_394296]],['_tgso'=_394296],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(45362,1140,36,45362)).
metta_file_buffer(+,'$COMMENT'(";; Implemented from Interpreters",1142,0),[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(45406,1141,43,45406)).
metta_file_buffer(+,'$COMMENT'(";; Public MeTTa",1144,0),[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(45406,1141,43,45406)).
metta_file_buffer(+,['@doc','get-type',['@desc',"Returns type notation of input atom"],['@params',[['@param',"Atom to get type for"]]],['@return',"Type notation or %Undefined% if there is no type for input Atom"]],[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(45406,1141,43,45406)).
metta_file_buffer(+,[:,'get-type',[->,'Atom','Atom']],[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(45649,1149,78,45649)).
metta_file_buffer(+,[:,'get-type',[->,'Atom','Atom','Atom']],[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(45677,1150,27,45677)).
metta_file_buffer(+,'$COMMENT'(";; Implemented from Interpreters",1152,0),[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(45710,1151,32,45710)).
metta_file_buffer(+,'$COMMENT'(";; Public MeTTa",1154,0),[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(45710,1151,32,45710)).
metta_file_buffer(+,['@doc','get-type-space',['@desc',"Returns type notation of input Atom (second argument) relative to a specified atomspace (first argument)"],['@params',[['@param',"Atomspace where type notation for input atom will be searched"],['@param',"Atom to get type for"]]],['@return',"Type notation or %Undefined% if there is no type for input Atom in provided atomspace"]],[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(45710,1151,32,45710)).
metta_file_buffer(+,'$COMMENT'(";; Implemented from Interpreters?",1161,0),[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(46127,1160,100,46127)).
metta_file_buffer(+,[:,'get-type-space',[->,'Atom','Atom','Atom']],[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(46127,1160,100,46127)).
metta_file_buffer(+,[=,['get-type-space',_399926,_399948],['get-type',_399948,_399926]],['_atom'=_399948,'_space'=_399926],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(46200,1162,38,46200)).
metta_file_buffer(+,'$COMMENT'(";; Public MeTTa",1166,0),[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(46259,1164,32,46259)).
metta_file_buffer(+,['@doc','get-metatype',['@desc',"Returns metatype of the input atom"],['@params',[['@param',"Atom to get metatype for"]]],['@return',"Metatype of input atom"]],[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(46259,1164,32,46259)).
metta_file_buffer(+,[:,'get-metatype',[->,'Atom','Atom']],[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(46435,1171,37,46435)).
metta_file_buffer(+,'$COMMENT'(";; Implemented from Interpreters  ",1173,0),[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(46467,1172,31,46467)).
metta_file_buffer(+,'$COMMENT'(";; Public MeTTa",1175,0),[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(46467,1172,31,46467)).
metta_file_buffer(+,['@doc',unify,['@desc',"Like Match but allows any sort of container for the first argument. (Match only allows MeTTa spaces.)"],['@params',[['@param',"The collection or space to match"],['@param',"Second atom to unify with"],['@param',"Result if two atoms unified successfully"],['@param',"Result otherwise"]]],['@return',"Third argument when found or forth one otherwise"]],[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(46467,1172,31,46467)).
metta_file_buffer(+,[:,unify,[->,'Atom','Atom','Atom','Atom','Atom']],[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(46889,1183,63,46889)).
metta_file_buffer(+,'$COMMENT'(";; Implemented from Interpreters",1185,0),[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(46929,1184,39,46929)).
metta_file_buffer(+,'$COMMENT'(";; Public MeTTa",1187,0),[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(46929,1184,39,46929)).
metta_file_buffer(+,['@doc',match,['@desc',"Searches for all declared atoms corresponding to the given pattern (second argument) and produces the output pattern (third argument)"],['@params',[['@param',"A grounded atom referencing a Space"],['@param',"Pattern atom to be matched"],['@param',"Output pattern typically containing variables from the input pattern"]]],['@return',"If match was successfull it outputs pattern (third argument) with filled variables (if any were present in pattern) using matched pattern (second argument). Nothing - otherwise"]],[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(46929,1184,39,46929)).
metta_file_buffer(+,[:,match,[->,'Atom','Atom','Atom','%Undefined%']],[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(47521,1194,191,47521)).
metta_file_buffer(+,'$COMMENT'(";; Implemented from Interpreters",1196,0),[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(47563,1195,41,47563)).
metta_file_buffer(+,'$COMMENT'(";(ALT= (match $space $pattern $template)",1197,0),[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(47563,1195,41,47563)).
metta_file_buffer(+,'$COMMENT'(";  (unify $space $pattern $template Empty))",1198,0),[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(47563,1195,41,47563)).
metta_file_buffer(+,'$COMMENT'(";; Public MeTTa",1200,0),[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(47563,1195,41,47563)).
metta_file_buffer(+,['@doc','register-module!',['@desc',"Takes a file system path (first argument) and loads the module into the runner"],['@params',[['@param',"File system path"]]],['@return',"Unit atom"]],[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(47563,1195,41,47563)).
metta_file_buffer(+,[:,'register-module!',[->,'Atom',[->]]],[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(47884,1205,24,47884)).
metta_file_buffer(+,'$COMMENT'(";; Implemented from Interpreters",1207,0),[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(47920,1206,35,47920)).
metta_file_buffer(+,'$COMMENT'(";; Public MeTTa",1209,0),[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(47920,1206,35,47920)).
metta_file_buffer(+,['@doc','mod-space!',['@desc',"Returns the space of the module (first argument) and tries to load the module if it is not loaded into the module system"],['@params',[['@param',"Module name"]]],['@return',"Space name"]],[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(47920,1206,35,47920)).
metta_file_buffer(+,[:,'mod-space!',[->,'Atom','hyperon::space::DynSpace']],[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(48188,1214,25,48188)).
metta_file_buffer(+,'$COMMENT'(";; Implemented from Interpreters",1216,0),[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(48238,1215,49,48238)).
metta_file_buffer(+,[=,['mod-space!',self],'&self'],[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(48238,1215,49,48238)).
metta_file_buffer(+,[=,['mod-space!',top],'&self'],[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(48299,1217,27,48299)).
metta_file_buffer(+,[=,['mod-space!',corelib],'&corelib'],[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(48326,1218,26,48326)).
metta_file_buffer(+,[=,['mod-space!',stdlib],'&stdlib'],[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(48360,1219,33,48360)).
metta_file_buffer(+,[=,['mod-space!',catalog],'&catalog'],[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(48392,1220,31,48392)).
metta_file_buffer(+,'$COMMENT'(";; Public MeTTa",1224,0),[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(48426,1221,33,48426)).
metta_file_buffer(+,['@doc','print-mods!',['@desc',"Prints all modules with their correspondent spaces"],['@params',[]],['@return',"Unit atom"]],[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(48426,1221,33,48426)).
metta_file_buffer(+,[:,'print-mods!',[->,[->]]],[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(48565,1228,24,48565)).
metta_file_buffer(+,'$COMMENT'(";; Implemented from Interpreters",1230,0),[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(48591,1229,25,48591)).
metta_file_buffer(+,'$COMMENT'(";; Public MeTTa",1232,0),[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(48591,1229,25,48591)).
metta_file_buffer(+,['@doc',assertEqual,['@desc',"Compares (sets of) results of evaluation of two expressions"],['@params',[['@param',"First expression"],['@param',"Second expression"]]],['@return',"Unit atom if both expression after evaluation is equal, error - otherwise"]],[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(48591,1229,25,48591)).
metta_file_buffer(+,[:,assertEqual,[->,'Atom','Atom','Atom']],[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(48900,1238,88,48900)).
metta_file_buffer(+,'$COMMENT'(";; Implemented from Interpreters",1240,0),[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(48936,1239,35,48936)).
metta_file_buffer(+,'$COMMENT'(";; Public MeTTa",1242,0),[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(48936,1239,35,48936)).
metta_file_buffer(+,['@doc',assertEqualToResult,['@desc',"Same as assertEqual but it doesn't evaluate second argument. Second argument is considered as a set of values of the first argument's evaluation"],['@params',[['@param',"First expression (it will be evaluated)"],['@param',"Second expression (it won't be evaluated)"]]],['@return',"Unit atom if both expression after evaluation is equal, error - otherwise"]],[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(48936,1239,35,48936)).
metta_file_buffer(+,[:,assertEqualToResult,[->,'Atom','Atom','Atom']],[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(49385,1248,88,49385)).
metta_file_buffer(+,'$COMMENT'(";; Implemented from Interpreters",1250,0),[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(49429,1249,43,49429)).
metta_file_buffer(+,'$COMMENT'(";; Public MeTTa",1252,0),[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(49429,1249,43,49429)).
metta_file_buffer(+,['@doc',collapse,['@desc',"Converts a nondeterministic result into a tuple"],['@params',[['@param',"Atom which will be evaluated"]]],['@return',"Tuple"]],[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(49429,1249,43,49429)).
metta_file_buffer(+,[:,collapse,[->,'Atom','Atom']],[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(49634,1257,20,49634)).
metta_file_buffer(+,'$COMMENT'(";; Implemented from Interpreters",1259,0),[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(49662,1258,27,49662)).
metta_file_buffer(+,'$COMMENT'(";; Public MeTTa",1261,0),[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(49662,1258,27,49662)).
metta_file_buffer(+,['@doc',capture,['@desc',"Wraps an atom and capture the current space"],['@params',[['@param',"Function name which space need to be captured"]]],['@return',"Function"]],[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(49662,1258,27,49662)).
metta_file_buffer(+,[:,capture,[->,'Atom','Atom']],[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(49884,1266,23,49884)).
metta_file_buffer(+,'$COMMENT'(";; Implemented from Interpreters",1268,0),[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(49911,1267,26,49911)).
metta_file_buffer(+,'$COMMENT'(";; Public MeTTa",1270,0),[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(49911,1267,26,49911)).
metta_file_buffer(+,['@doc',case,['@desc',"Subsequently tests multiple pattern-matching conditions (second argument) for the given value (first argument)"],['@params',[['@param',"Atom (it will be evaluated)"],['@param',"Tuple of pairs mapping condition patterns to results"]]],['@return',"Result of evaluating of Atom bound to met condition"]],[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(49911,1267,26,49911)).
metta_file_buffer(+,[:,case,[->,'Atom','Expression','Atom']],[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(50288,1276,66,50288)).
metta_file_buffer(+,'$COMMENT'(";; Implemented from Interpreters",1278,0),[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(50323,1277,34,50323)).
metta_file_buffer(+,'$COMMENT'(";; Public MeTTa",1280,0),[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(50323,1277,34,50323)).
metta_file_buffer(+,['@doc',superpose,['@desc',"Turns a tuple (first argument) into a nondeterministic result"],['@params',[['@param',"Tuple to be converted"]]],['@return',"Argument converted to nondeterministic result"]],[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(50323,1277,34,50323)).
metta_file_buffer(+,[:,superpose,[->,'Expression','%Undefined%']],[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(50576,1285,60,50576)).
metta_file_buffer(+,'$COMMENT'(";; Implemented from Interpreters",1287,0),[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(50618,1286,41,50618)).
metta_file_buffer(+,'$COMMENT'(";; Public MeTTa",1289,0),[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(50618,1286,41,50618)).
metta_file_buffer(+,['@doc','pragma!',['@desc',"Changes global key's (first argument) value to a new one (second argument)"],['@params',[['@param',"Key's name"],['@param',"New value"]]],['@return',"Unit atom"]],[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(50618,1286,41,50618)).
metta_file_buffer(+,[:,'pragma!',[->,'Symbol','%Undefined%',[->]]],[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(50860,1295,24,50860)).
metta_file_buffer(+,'$COMMENT'(";; Implemented from Interpreters",1297,0),[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(50901,1296,40,50901)).
metta_file_buffer(+,'$COMMENT'(";; Public MeTTa",1299,0),[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(50901,1296,40,50901)).
metta_file_buffer(+,['@doc','import!',['@desc',"Imports module using its relative path (second argument) and binds it to the token (first argument) which will represent imported atomspace. If first argument is &self then everything will be imported to current atomspace"],['@params',[['@param',"Symbol, which is turned into the token for accessing the imported module"],['@param',"Module name"]]],['@return',"Unit atom"]],[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(50901,1296,40,50901)).
metta_file_buffer(+,'$COMMENT'(";; Implemented from Interpreters",1306,0),[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(51354,1305,24,51354)).
metta_file_buffer(+,[:,'import!',[->,'Atom','Atom',[->]]],[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(51354,1305,24,51354)).
metta_file_buffer(+,'$COMMENT'(";; Public MeTTa",1309,0),[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(51419,1307,31,51419)).
metta_file_buffer(+,['@doc',include,['@desc',"Works just like import! but with &self as a first argument. So everything from input file will be included in the current atomspace and evaluated"],['@params',[['@param',"Name of metta script to import"]]],['@return',"Unit atom"]],[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(51419,1307,31,51419)).
metta_file_buffer(+,[:,include,[->,'Atom','Atom']],[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(51694,1314,24,51694)).
metta_file_buffer(+,'$COMMENT'(";; Implemented from Interpreters",1316,0),[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(51721,1315,26,51721)).
metta_file_buffer(+,'$COMMENT'(";; Public MeTTa",1318,0),[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(51721,1315,26,51721)).
metta_file_buffer(+,['@doc','bind!',['@desc',"Registers a new token which is replaced with an atom during the parsing of the rest of the program"],['@params',[['@param',"Token name"],['@param',"Atom, which is associated with the token after reduction"]]],['@return',"Unit atom"]],[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(51721,1315,26,51721)).
metta_file_buffer(+,[:,'bind!',[->,'Symbol','%Undefined%',[->]]],[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(52032,1324,24,52032)).
metta_file_buffer(+,'$COMMENT'(";; Implemented from Interpreters",1326,0),[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(52071,1325,38,52071)).
metta_file_buffer(+,'$COMMENT'(";; Public MeTTa",1328,0),[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(52071,1325,38,52071)).
metta_file_buffer(+,['@doc','trace!',['@desc',"Prints its first argument and returns second. Both arguments will be evaluated before processing"],['@params',[['@param',"Atom to print"],['@param',"Atom to return"]]],['@return',"Evaluated second input"]],[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(52071,1325,38,52071)).
metta_file_buffer(+,[:,'trace!',[->,'%Undefined%',_463628,_463628]],['_a'=_463628],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(52357,1334,37,52357)).
metta_file_buffer(+,'$COMMENT'(";; Implemented from Interpreters",1336,0),[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(52391,1335,33,52391)).
metta_file_buffer(+,'$COMMENT'(";; Public MeTTa",1338,0),[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(52391,1335,33,52391)).
metta_file_buffer(+,['@doc','println!',['@desc',"Prints a line of text to the console"],['@params',[['@param',"Expression/atom to be printed out"]]],['@return',"Unit atom"]],[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(52391,1335,33,52391)).
metta_file_buffer(+,[:,'println!',[->,'%Undefined%',[->]]],[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(52594,1343,24,52594)).
metta_file_buffer(+,'$COMMENT'(";; Implemented from Interpreters",1345,0),[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(52629,1344,34,52629)).
metta_file_buffer(+,'$COMMENT'(";; Public MeTTa",1347,0),[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(52629,1344,34,52629)).
metta_file_buffer(+,['@doc','format-args',['@desc',"Fills {} symbols in the input expression with atoms from the second expression. E.g. (format-args (Probability of {} is {}%) (head 50)) gives [(Probability of head is 50%)]. Atoms in the second input value could be variables"],['@params',[['@param',"Expression with {} symbols to be replaced"],['@param',"Atoms to be placed inside expression instead of {}"]]],['@return',"Expression with replaced {} with atoms"]],[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(52629,1344,34,52629)).
metta_file_buffer(+,[:,'format-args',[->,'String','Atom','String']],[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(53126,1353,53,53126)).
metta_file_buffer(+,'$COMMENT'(";; Implemented from Interpreters",1355,0),[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(53166,1354,39,53166)).
metta_file_buffer(+,'$COMMENT'(";; Public MeTTa",1357,0),[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(53166,1354,39,53166)).
metta_file_buffer(+,['@doc',sealed,['@desc',"Replaces all occurrences of any var from var list (first argument) inside atom (second argument) by unique variable. Can be used to create a locally scoped variables"],['@params',[['@param',"Variable list e.g. ($x $y)"],['@param',"Atom which uses those variables"]]],['@return',"Second argument but with variables being replaced with unique variables"]],[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(53166,1354,39,53166)).
metta_file_buffer(+,[:,sealed,[->,'Expression','Atom','Atom']],[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(53592,1363,86,53592)).
metta_file_buffer(+,'$COMMENT'(";; Implemented from Interpreters",1365,0),[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(53629,1364,36,53629)).
metta_file_buffer(+,[:>,'ValueAtom','Atom'],[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(53629,1364,36,53629)).
metta_file_buffer(+,[:>,'ValueAtom','Grounded'],[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(53683,1367,19,53683)).
metta_file_buffer(+,[:>,'ForeignObject','ValueAtom'],[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(53707,1368,23,53707)).
metta_file_buffer(+,[:>,'PyObject','ForeignObject'],[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(53736,1369,28,53736)).
metta_file_buffer(+,'$COMMENT'(";; Public MeTTa",1372,0),[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(53764,1370,27,53764)).
metta_file_buffer(+,['@doc','py-list',['@desc',"Converts a MeTTa Expression into a Python list and returns it as a PyObject."],['@params',[['@param',['@desc',"A MeTTa List that will be converted into a Python list"]]]],['@return',['@desc',"A Python list object that represents the given MeTTa Expression as a PyObject"]]],[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(53764,1370,27,53764)).
metta_file_buffer(+,[:,'py-list',[->,'Expression','PyObject']],[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(54082,1379,1,54082)).
metta_file_buffer(+,'$COMMENT'(";; Implemented from Interpreters",1381,0),[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(54119,1380,36,54119)).
metta_file_buffer(+,'$COMMENT'(";; Public MeTTaLog",1383,0),[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(54119,1380,36,54119)).
metta_file_buffer(+,['@doc','py-eval',['@desc',"Evaluates a Python expression from a string and returns the result as a PyObject."],['@params',[['@param',['@desc',"A string representing a Python expression that will be evaluated"]]]],['@return',['@desc',"The result of evaluating the Python expression as a PyObject"]]],[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(54119,1380,36,54119)).
metta_file_buffer(+,[:,'py-eval',[->,'String','PyObject']],[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(54471,1390,1,54471)).
metta_file_buffer(+,'$COMMENT'(";; Implemented from Interpreters",1392,0),[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(54504,1391,32,54504)).
metta_file_buffer(+,'$COMMENT'(";; Public MeTTaLog",1394,0),[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(54504,1391,32,54504)).
metta_file_buffer(+,['@doc','py-exec!',['@desc',"Executes some Python sourcecode from a string !(py-exec! \"import torch\") -> True.  !(py-exec! \"import torche\") -> False. "],['@params',[['@param',['@type','String'],['@desc',"A string representing a Python sourcecode that will be executed"]]]],['@return',['@desc',"The True|False results of executing the Python expression"]]],[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(54504,1391,32,54504)).
metta_file_buffer(+,[:,'py-exec!',[->,'String','Bool']],[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(54912,1401,1,54912)).
metta_file_buffer(+,'$COMMENT'(";; Implemented from Interpreters",1403,0),[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(54942,1402,29,54942)).
metta_file_buffer(+,'$COMMENT'("; TODO: Segmentation fault (core dumped) when calling !(help &self)",1405,0),[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(54942,1402,29,54942)).
metta_file_buffer(+,'$COMMENT'("; TODO: help! not working for &self (segmentation fault)",1406,0),[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(54942,1402,29,54942)).
metta_file_buffer(+,'$COMMENT'(";(@doc &self",1407,0),[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(54942,1402,29,54942)).
metta_file_buffer(+,'$COMMENT'(";  (@desc \"Returns reference to the current atomspace\")",1408,0),[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(54942,1402,29,54942)).
metta_file_buffer(+,'$COMMENT'(";  (@params ())",1409,0),[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(54942,1402,29,54942)).
metta_file_buffer(+,'$COMMENT'(";  (@return \"Reference to the current atomspace\"))",1410,0),[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(54942,1402,29,54942)).
metta_file_buffer(+,'$COMMENT'("; TODO: help! not working for operations which are defined in both Python and",1412,0),[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(54942,1402,29,54942)).
metta_file_buffer(+,'$COMMENT'("; Rust standard library: +, -, *, /, %, <, >, <=, >=, ==",1413,0),[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(54942,1402,29,54942)).
metta_file_buffer(+,'$COMMENT'(";; Public MeTTa",1414,0),[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(54942,1402,29,54942)).
metta_file_buffer(+,['@doc',+,['@desc',"Sums two numbers"],['@params',[['@param',"Addend"],['@param',"Augend"]]],['@return',"Sum"]],[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(54942,1402,29,54942)).
metta_file_buffer(+,[:,+,[->,'Number','Number','Number']],[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(55504,1420,18,55504)).
metta_file_buffer(+,'$COMMENT'(";; Implemented from Interpreters",1422,0),[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(55536,1421,31,55536)).
metta_file_buffer(+,'$COMMENT'(";; Public MeTTa",1424,0),[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(55536,1421,31,55536)).
metta_file_buffer(+,['@doc',-,['@desc',"Subtracts second argument from first one"],['@params',[['@param',"Minuend"],['@param',"Deductible"]]],['@return',"Difference"]],[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(55536,1421,31,55536)).
metta_file_buffer(+,[:,-,[->,'Number','Number','Number']],[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(55737,1430,25,55737)).
metta_file_buffer(+,'$COMMENT'(";; Implemented from Interpreters",1432,0),[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(55769,1431,31,55769)).
metta_file_buffer(+,'$COMMENT'(";; Public MeTTa",1434,0),[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(55769,1431,31,55769)).
metta_file_buffer(+,['@doc',*,['@desc',"Multiplies two numbers"],['@params',[['@param',"Multiplier"],['@param',"Multiplicand"]]],['@return',"Product"]],[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(55769,1431,31,55769)).
metta_file_buffer(+,[:,*,[->,'Number','Number','Number']],[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(55954,1440,22,55954)).
metta_file_buffer(+,'$COMMENT'(";; Implemented from Interpreters",1442,0),[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(55986,1441,31,55986)).
metta_file_buffer(+,'$COMMENT'(";; Public MeTTa",1444,0),[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(55986,1441,31,55986)).
metta_file_buffer(+,['@doc',/,['@desc',"Divides first argument by second one"],['@params',[['@param',"Dividend"],['@param',"Divisor"]]],['@return',"Fraction"]],[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(55986,1441,31,55986)).
metta_file_buffer(+,[:,/,[->,'Number','Number','Number']],[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(56179,1450,23,56179)).
metta_file_buffer(+,'$COMMENT'(";; Implemented from Interpreters",1452,0),[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(56211,1451,31,56211)).
metta_file_buffer(+,'$COMMENT'(";; Public MeTTa",1454,0),[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(56211,1451,31,56211)).
metta_file_buffer(+,['@doc','%',['@desc',"Modulo operator. It returns remainder of dividing first argument by second argument"],['@params',[['@param',"Dividend"],['@param',"Divisor"]]],['@return',"Remainder"]],[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(56211,1451,31,56211)).
metta_file_buffer(+,[:,'%',[->,'Number','Number','Number']],[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(56452,1460,24,56452)).
metta_file_buffer(+,'$COMMENT'(";; Implemented from Interpreters",1462,0),[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(56484,1461,31,56484)).
metta_file_buffer(+,'$COMMENT'(";; Public MeTTa",1464,0),[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(56484,1461,31,56484)).
metta_file_buffer(+,['@doc',<,['@desc',"Less than. Checks if first argument is less than second one"],['@params',[['@param',"First number"],['@param',"Second number"]]],['@return',"True if first argument is less than second, False - otherwise"]],[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(56484,1461,31,56484)).
metta_file_buffer(+,[:,<,[->,'Number','Number','Bool']],[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(56763,1470,76,56763)).
metta_file_buffer(+,'$COMMENT'(";; Implemented from Interpreters",1472,0),[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(56793,1471,29,56793)).
metta_file_buffer(+,'$COMMENT'(";; Public MeTTa",1474,0),[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(56793,1471,29,56793)).
metta_file_buffer(+,['@doc',>,['@desc',"Greater than. Checks if first argument is greater than second one"],['@params',[['@param',"First number"],['@param',"Second number"]]],['@return',"True if first argument is greater than second, False - otherwise"]],[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(56793,1471,29,56793)).
metta_file_buffer(+,[:,>,[->,'Number','Number','Bool']],[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(57081,1480,79,57081)).
metta_file_buffer(+,'$COMMENT'(";; Implemented from Interpreters",1482,0),[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(57111,1481,29,57111)).
metta_file_buffer(+,'$COMMENT'(";; Public MeTTa",1484,0),[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(57111,1481,29,57111)).
metta_file_buffer(+,['@doc',<=,['@desc',"Less than or equal. Checks if first argument is less than or equal to second one"],['@params',[['@param',"First number"],['@param',"Second number"]]],['@return',"True if first argument is less than or equal to second, False - otherwise"]],[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(57111,1481,29,57111)).
metta_file_buffer(+,[:,<=,[->,'Number','Number','Bool']],[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(57424,1490,88,57424)).
metta_file_buffer(+,'$COMMENT'(";; Implemented from Interpreters",1492,0),[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(57455,1491,30,57455)).
metta_file_buffer(+,'$COMMENT'(";; Public MeTTa",1494,0),[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(57455,1491,30,57455)).
metta_file_buffer(+,['@doc',>=,['@desc',"Greater than or equal. Checks if first argument is greater than or equal to second one"],['@params',[['@param',"First number"],['@param',"Second number"]]],['@return',"True if first argument is greater than or equal to second, False - otherwise"]],[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(57455,1491,30,57455)).
metta_file_buffer(+,[:,>=,[->,'Number','Number','Bool']],[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(57777,1500,91,57777)).
metta_file_buffer(+,'$COMMENT'(";; Implemented from Interpreters",1502,0),[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(57808,1501,30,57808)).
metta_file_buffer(+,'$COMMENT'(";; Public MeTTa",1504,0),[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(57808,1501,30,57808)).
metta_file_buffer(+,['@doc',==,['@desc',"Checks equality for two arguments of the same type"],['@params',[['@param',"First argument"],['@param',"Second argument"]]],['@return',"Returns True if two arguments are equal, False - otherwise. If arguments are of different type function returns Error currently"]],[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(57808,1501,30,57808)).
metta_file_buffer(+,[:,==,[->,_511996,_511996,'Bool']],['_t'=_511996],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(58149,1510,142,58149)).
metta_file_buffer(+,'$COMMENT'(";; Implemented from Interpreters",1512,0),[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(58172,1511,22,58172)).
metta_file_buffer(+,'$COMMENT'(";; Public MeTTa",1514,0),[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(58172,1511,22,58172)).
metta_file_buffer(+,['@doc',unique,['@desc',"Function takes non-deterministic input (first argument) and returns only unique entities. E.g. (unique (superpose (a b c d d))) -> [a, b, c, d]"],['@params',[['@param',"Non-deterministic set of values"]]],['@return',"Unique non-deterministic values from input set"]],[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(58172,1511,22,58172)).
metta_file_buffer(+,[:,unique,[->,'Atom','Atom']],[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(58515,1519,61,58515)).
metta_file_buffer(+,'$COMMENT'(";; Implemented from Interpreters",1521,0),[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(58541,1520,25,58541)).
metta_file_buffer(+,'$COMMENT'(";; Public MeTTa",1523,0),[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(58541,1520,25,58541)).
metta_file_buffer(+,['@doc',union,['@desc',"Function takes two non-deterministic inputs (first and second argument) and returns their union. E.g. (union (superpose (a b b c)) (superpose (b c c d))) -> [a, b, b, c, b, c, c, d]"],['@params',[['@param',"Non-deterministic set of values"],['@param',"Another non-deterministic set of values"]]],['@return',"Non-deterministic Union of sets"]],[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(58541,1520,25,58541)).
metta_file_buffer(+,[:,union,[->,'Atom','Atom','Atom']],[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(58961,1529,46,58961)).
metta_file_buffer(+,'$COMMENT'(";; Implemented from Interpreters",1531,0),[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(58991,1530,29,58991)).
metta_file_buffer(+,'$COMMENT'(";; Public MeTTa",1533,0),[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(58991,1530,29,58991)).
metta_file_buffer(+,['@doc',intersection,['@desc',"Function takes two non-deterministic inputs (first and second argument) and returns their intersection. E.g. (intersection (superpose (a b c c)) (superpose (b c c c d))) -> [b, c, c]"],['@params',[['@param',"Non-deterministic set of values"],['@param',"Another non-deterministic set of values"]]],['@return',"Non-deterministic Intersection of sets"]],[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(58991,1530,29,58991)).
metta_file_buffer(+,[:,intersection,[->,'Atom','Atom','Atom']],[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(59426,1539,53,59426)).
metta_file_buffer(+,'$COMMENT'(";; Implemented from Interpreters",1541,0),[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(59463,1540,36,59463)).
metta_file_buffer(+,'$COMMENT'(";; Public MeTTa",1543,0),[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(59463,1540,36,59463)).
metta_file_buffer(+,['@doc',subtraction,['@desc',"Function takes two non-deterministic inputs (first and second argument) and returns their subtraction. E.g. !(subtraction (superpose (a b b c)) (superpose (b c c d))) -> [a, b]"],['@params',[['@param',"Non-deterministic set of values"],['@param',"Another non-deterministic set of values"]]],['@return',"Non-deterministic Subtraction of sets"]],[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(59463,1540,36,59463)).
metta_file_buffer(+,[:,subtraction,[->,'Atom','Atom','Atom']],[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(59890,1549,52,59890)).
metta_file_buffer(+,'$COMMENT'(";; Implemented from Interpreters",1551,0),[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(59926,1550,35,59926)).
metta_file_buffer(+,'$COMMENT'(";; Public MeTTa",1553,0),[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(59926,1550,35,59926)).
metta_file_buffer(+,['@doc','git-module!',['@desc',"Provides access to module in a remote git repo, from within MeTTa code. Similar to `register-module!`, this op will bypass the catalog search"],['@params',[['@param',"URL to github repo"]]],['@return',"Unit atom"]],[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(59926,1550,35,59926)).
metta_file_buffer(+,[:,'git-module!',[->,'Atom',[->]]],[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(60222,1558,24,60222)).
metta_file_buffer(+,'$COMMENT'(";; Implemented from Interpreters\t",1560,0),[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(60253,1559,30,60253)).
metta_file_buffer(+,'$COMMENT'("; !(import! &corelib \"src/canary/stdlib_mettalog.metta\")",1562,0),[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(60253,1559,30,60253)).
metta_file_buffer(+,'$COMMENT'(";!(println! \"!(import! &corelib \\\"src/canary/stdlib_mettalog.metta\\\")\")",1563,0),[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(60253,1559,30,60253)).
metta_file_buffer(+,'$COMMENT'(";; Public MeTTa",1565,0),[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(60253,1559,30,60253)).
metta_file_buffer(+,['@doc','findall!',['@desc',"Takes a Template and a Goal. Returns the list resulting from substituting all bindings from solving Goal into Template.\n  See Prolog's built-in predicate findall/3."],['@params',[['@param',"Template"],['@param',"Goal"]]],['@return',"Result list of all bindings for Goal substituted into Template"]],[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(60253,1559,30,60253)).
metta_file_buffer(+,[:,'findall!',[->,'Expression','Expression','Expression']],[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(60763,1572,77,60763)).
metta_file_buffer(+,'$COMMENT'(";; Functional Programming",1575,0),[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(60814,1573,50,60814)).
metta_file_buffer(+,['@doc','maplist!',['@desc',"Takes a function F and one to three lists; Returns the result of applying F to each item in the list(s). \n The provided lists are not evaluated (this matches the behavior of e.g. cons-atom).\n F must have the number of lists provided as a valid arity (i.e. unary for one list, binary for two, ternary for three).\n Use concurrent-maplist! for a multi-threaded, nondeterministic version.\n See Prolog's built-in predicate maplist."],['@params',[['@param',"Function to be applied"],['@param',"List"]]],['@return',"Result of applying Function to List(s)"]],[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(60814,1573,50,60814)).
metta_file_buffer(+,[:,'maplist!',[->,'Function','Expression','Expression']],[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(61422,1585,53,61422)).
metta_file_buffer(+,[:,'maplist!',[->,'Function','Expression','Expression','Expression']],[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(61471,1586,48,61471)).
metta_file_buffer(+,[:,'maplist!',[->,'Function','Expression','Expression','Expression','Expression']],[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(61531,1587,59,61531)).
metta_file_buffer(+,'$COMMENT'(";; Functional Programming",1590,0),[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(61602,1588,70,61602)).
metta_file_buffer(+,['@doc','concurrent-maplist!',['@desc',"Takes a function F and one to three lists; Returns the result of applying F to each item in the list(s). \n The provided lists are not evaluated (this matches the behavior of e.g. cons-atom).\n F must have the number of lists provided as a valid arity (i.e. unary for one list, binary for two, ternary for three).\n The applications of F to the list items are processed in parallel. Because of the overhead of this approach, a speedup is only likely if F is expensive to evaluate.\n Use maplist! for a single-threaded, deterministic version.\n See Prolog's built-in predicate concurrent-maplist."],['@params',[['@param',"Function to be applied"],['@param',"List"]]],['@return',"Result of applying Function to List(s)"]],[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(61602,1588,70,61602)).
metta_file_buffer(+,[:,'concurrent-maplist!',[->,'Function','Expression','Expression']],[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(62385,1601,53,62385)).
metta_file_buffer(+,[:,'concurrent-maplist!',[->,'Function','Expression','Expression','Expression']],[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(62445,1602,59,62445)).
metta_file_buffer(+,[:,'concurrent-maplist!',[->,'Function','Expression','Expression','Expression','Expression']],[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(62516,1603,70,62516)).
metta_file_buffer(+,'$COMMENT'(";; Public MeTTa",1606,0),[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(62598,1604,81,62598)).
metta_file_buffer(+,['@doc',throw,['@desc',"Raises an exception. See also `catch`; the system will look for the innermost catch such that Exception unifies with Catcher."],['@params',[['@param',"Exception"]]],['@return',"Does not return - raises an exception"]],[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(62598,1604,81,62598)).
metta_file_buffer(+,[:,throw,[->,'Atom','ErrorType']],[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(62858,1611,52,62858)).
metta_file_buffer(+,'$COMMENT'(";; Public MeTTa",1614,0),[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(62888,1612,29,62888)).
metta_file_buffer(+,['@doc',catch,['@desc',"Executes Form. If an exception is raised with `throw` during execution of Form while this is the innermost catch such that Catcher unifies with Exception, the exception is caught. Recover is then executed with bindings from Catcher."],['@params',[['@param',"Form"],['@param',"Catcher"],['@param',"Recover"]]],['@return',"Result of Form if no exception is raised. Result of Recover (with bindings from Catcher) if an exception is caught."]],[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(62888,1612,29,62888)).
metta_file_buffer(+,[:,catch,[->,'Atom','Atom','Atom','Atom']],[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(63374,1621,130,63374)).
metta_file_buffer(+,'$COMMENT'(";; Public MeTTa",1624,0),[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(63409,1622,34,63409)).
metta_file_buffer(+,['@doc','max-time!',['@desc',"Executes Form. If execution takes longer than Time, will raise a time_limit_exceeded exception. See also `catch`."],['@params',[['@param',"Time (in seconds)"],['@param',"Form"]]],['@return',"Result of Form if execution completes within Time. Raises an exception otherwise."]],[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(63409,1622,34,63409)).
metta_file_buffer(+,[:,'max-time!',[->,'Number','Atom','Atom']],[],'/home/runner/work/metta-wam/metta-wam/src/canary/stdlib_mettalog.metta','$stream_position'(63733,1630,96,63733)).
